// Programa:  BatFullM
// Autor:     Robert Koch
// Data:      21/04/2022
// Descricao: Batch de integracao com FullWMS - leitura de movimentacoes feitas no Full para replica-las no Protheus
//            Devem ser observados os formatos de dados enviados para o Fullsoft nas views de integracao.

// Tags para automatizar catalogo de customizacoes:
// #TipoDePrograma    #Processamento
// #Descricao         #Batch de integracao com FullWMS - leitura de movimentacoes feitas no Full para replica-las no Protheus
// #PalavasChave      #batch #agendamento #automacao #integracao #fullsoft #fullwms
// #TabelasPrincipais #SD3 #SD1 #SB2 #SB8
// #Modulos           #EST

// Historico de alteracoes:
// 19/01/2023 - Robert - ClsTrEstq:Libera() nao tenta mais executar a transferencia no final.
// 15/09/2023 - Robert - Campo tb_wms_movimentacoes.status_protheus passa a gravar descricao junto
//                     - Passa a gerar solicitacao de transferencia com :CodMotivo=08
// 27/12/2023 - Robert - Passa a usar atributo ClsTrEstq:CodRetorno.
// 03/03/2024 - Robert - Chamadas de metodos de ClsSQL() nao recebiam parametros.
//

#Include "Protheus.ch"
#Include "TbiConn.ch"

// ------------------------------------------------------------------------------------
User Function BatFullM ()
	local _aAreaAnt  := U_ML_SRArea ()
	local _aAmbAnt   := U_SalvaAmb ()
	local _oSQL      := NIL
	local _oTrEstq   := nil
	local _sAliasQ   := ""
	local _lRet      := .T.
	private _aStatProt := {}  // Deixar PRIVATE para ser vista pelas demais functions.

	// Define os possiveis valores para os campos 'status_protheus'.
	// Manter compatibilidade entre as tabelas tb_wms_entrada e tb_wms_pedidos !!!
	aadd (_aStatProt, {'1', 'Falta estq ERP'})
	aadd (_aStatProt, {'2', 'Outros erros'})
	aadd (_aStatProt, {'3', 'Executado no ERP'})
	aadd (_aStatProt, {'4', '(reservado)'})  // [Qt Full # qt ERP] Reservado para uso na integracao de guarda das etiquetas
	aadd (_aStatProt, {'5', '(reservado)'})  // [qtde_mov < qtde_exec] Reservado para uso na integracao de guarda das etiquetas
	aadd (_aStatProt, {'6', '(reservado)'})  // [solic.c/nao aceite] Reservado para uso na integracao de guarda das etiquetas
	aadd (_aStatProt, {'C', 'Cancelado no ERP'})

	// Variavel para erros de rotinas automaticas. Deixar tipo 'private' para ser vista por outras rotinas.
	if type ("_sErroAuto") != 'C'
		private _sErroAuto := ""
	endif

	// Busca movimentos exportados pelo Fullsoft.
	_oSQL := ClsSQL ():New ()
	_oSQL:_sQuery := ""
	_oSQL:_sQuery += " select *"
	_oSQL:_sQuery +=      " , dbo.VA_DatetimeToVarchar (dthr) as dtemis"  // Para gravacao no Protheus
	_oSQL:_sQuery +=      " , format (dthr, 'yyyy-MM-dd HH:mm:ss.fff') as PK"  // Nao estou muito confortavel com isto, mas foi o melhor que consegui para usar como 'PK'.
	_oSQL:_sQuery +=   " from tb_wms_movimentacoes"
	_oSQL:_sQuery +=  " where status_protheus not like '3%'"  // 3 = executado
	_oSQL:_sQuery +=    " and status_protheus not like 'C%'"  // C = cancelado: por que jah foi acertado manualmente, ou jah foi inventariado, etc.
	_oSQL:_sQuery +=    " and status_protheus not like '5%'"  // 5 = qtd.movimentada diferente qt.executada
	_oSQL:_sQuery +=  " order by dthr"
	_oSQL:Log ()
	_sAliasQ := _oSQL:Qry2Trb (.f.)
	(_sAliasQ) -> (dbgotop ())
	do while ! (_sAliasQ) -> (eof ())

		sb1 -> (dbsetorder (1))
		if ! sb1 -> (dbseek (xfilial ("SB1") + left (alltrim ((_sAliasQ) -> coditem) + space (15), 15), .F.))
			U_Log2 ('erro', '[' + procname () + "]Item '" + alltrim ((_sAliasQ) -> coditem) + "' nao encontrado na tabela SB1.")
			_AtuFull ((_sAliasQ) -> PK, '2', '')  // Atualiza a tabela do Fullsoft como 'outro erro nao tratado na transferancia'
			(_sAliasQ) -> (dbskip ())
			loop
		endif
		
		do case

		// Baixas de estoque do endereco de avarias: transferir para ax.94
		// No ax.94 alguem vai fazer a baixa (via NF, requisicao, supressao, rede de flu, aparatar, entregar aos dementadores, sei la...)
		case alltrim ((_sAliasQ) -> tipo) == '3'
			U_Log2 ('debug', '[' + procname () + ']Processando mov.tipo 3 cod ' + alltrim ((_sAliasQ) -> coditem) + ' dthr ' + alltrim ((_sAliasQ) -> PK) + ' qt: ' + cvaltochar ((_sAliasQ) -> qtde) + ' lote: ' + (_sAliasQ) -> lote)
/*
			// Verifica se vai ter estoque suficiente para transferir.
			sb2 -> (dbsetorder (1))  // B2_FILIAL+B2_COD+B2_LOCAL
			if ! sb2 -> (dbseek (xfilial ("SB2") + left (alltrim ((_sAliasQ) -> coditem) + space (15), 15) + '01', .F.)) .or. sb2 -> b2_qatu < (_sAliasQ) -> qtde
				u_help ("Sem saldo estoque produto '" + alltrim ((_sAliasQ) -> coditem) + "' no ax.01 para transferir.",, .t.)
				_AtuFull ((_sAliasQ) -> PK, '1', '')  // Atualiza a tabela do Fullsoft como 'falta estoque no ERP'
				(_sAliasQ) -> (dbskip ())
				loop
			endif
*/
			_oTrEstq := ClsTrEstq ():New ()
			_oTrEstq:FilOrig  = cFilAnt
			_oTrEstq:FilDest  = cFilAnt
			_oTrEstq:ProdOrig = left (alltrim ((_sAliasQ) -> coditem) + space (15), 15)
			_oTrEstq:ProdDest = left (alltrim ((_sAliasQ) -> coditem) + space (15), 15)
			_oTrEstq:AlmOrig  = '01'
			_oTrEstq:AlmDest  = '94'
			if sb1 -> b1_rastro == 'L'
				_oTrEstq:LoteOrig = left (alltrim ((_sAliasQ) -> lote) + space (10), 10)
				_oTrEstq:LoteDest = left (alltrim ((_sAliasQ) -> lote) + space (10), 10)
			endif
			_oTrEstq:QtdSolic  = (_sAliasQ) -> qtde
			_oTrEstq:CodMotivo = '08'  // Cfe tabela 56 do ZX5
			_oTrEstq:Motivo    = 'Baixa avaria - ' + (_sAliasQ) -> obs
			_oTrEstq:UsrIncl   = 'FullWMS'  //cUserName
			_oTrEstq:DtEmis    = stod ((_sAliasQ) -> dtemis)
			if ! _oTrEstq:Grava ()
				U_Log2 ('erro', '[' + procname () + ']Nao gerou ZAG. ' + _oTrEstq:UltMsg)
				
				// Se recebi um codigo de retorno conhecido, propago-o para a tabela do Fullsoft.
				if left (_oTrEstq:CodRetorno, 1) == '1'
					_AtuFull ((_sAliasQ) -> PK, '1', '')  // Atualiza a tabela do Fullsoft como 'Falta estoque'
				else
					_AtuFull ((_sAliasQ) -> PK, '2', '')  // Atualiza a tabela do Fullsoft como 'outro erro nao tratado na transferancia'
				endif
			else
				_AtuFull ((_sAliasQ) -> PK, '3', _oTrEstq:Docto + _oTrEstq:Seq)  // Atualiza a tabela do Fullsoft como 'executado no ERP'
		
				// Chama a rotina de liberacao do docto. Se estiver em condicoes, a transferencia jah serah executada.
				u_log2 ('debug', 'Chamando liberacao do ZAG')
				_oTrEstq:Libera (.F., 'FULLWMS')
				_oTrEstq:Executa ()  // Tenta executar, pois as liberacoes podem ter tido exito.
			endif
		otherwise
			u_help ("Sem tratamento para movimentos tipo '" + (_sAliasQ) -> tipo + "' lidos na tabela tb_wms_movimentacoes do FullWMS.", _oSQL:_sQuery, .t.)
		endcase

		(_sAliasQ) -> (dbskip ())

	//	EXIT  // DURANTE TESTES, PARA RODAR 1 REGISTRO POR VEZ


	enddo
	(_sAliasQ) -> (dbclosearea ())
	dbselectarea ("SB1")

	U_SalvaAmb (_aAmbAnt)
	U_ML_SRArea (_aAreaAnt)
return _lRet



// --------------------------------------------------------------------------------------------
// Atualiza status no FullWMS.
// Procurar manter, aqui, os mesmos codigos de status em todos os programas BatFull*, apesar de serem tabelas diferentes:
// 1 = 'falta estoque para fazer a transferencia'
// 2 = 'outro erro nao tratado na transferancia'
// 3 = 'executado no ERP'
// 4 = 'diferenca na quantidade'
// 5 = 'qtde movimentada menor que executada' (no caso de recebimento de producao)
// 9 = 'cancelado no ERP'
static function _AtuFull (_sDtHr, _sStatus, _sIdZAG)
	local _oSQL  := NIL
	local _nStat := 0
	local _lRet  := .F.

	_nStat = ascan (_aStatProt, {|_aVal| _aVal [1] == _sStatus})
	if _nStat == 0
		u_help ("Tentativa de gravar um status desconhecido ('" + cvaltochar (_sStatus) + "') na tabela tb_wms_movimentacoes",, .t.)
		_lRet = .F.
	else
		// Concatena o descritivo do status, por que eh sempre uma complicacao
		// na hora de consultar essa tabela, sem saber o significado de cada um.
		// Vou habilitar compactacao da tabela no SQL, entao a existencia de
		// muitos registros com dados semelhantes vai reduzir o tamanho.
		_sStatus += '-' + _aStatProt [_nStat, 2]

		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := " update tb_wms_movimentacoes"
		_oSQL:_sQuery +=    " set status_protheus = '" + _sStatus + "'"
		_oSQL:_sQuery +=      " , IdZAG = '" + _sIdZAG + "'"
		_oSQL:_sQuery +=  " where dthr = '" + alltrim (_sDtHr) + "'"  // Primary key
		_oSQL:Log ()
		_lRet = _oSQL:Exec ()
	endif
return _lRet
