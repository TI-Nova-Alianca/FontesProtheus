// Programa...: BlEstF
// Autor......: Robert Koch
// Data.......: 29/10/2023
// Descricao..: Interface para solicitar bloqueio/desbloqueio de lotes com FullWMS
//
// Historico de alteracoes:
//

// Se a funcao chamadora quiser me passar itens a processar, deve estar neste mesmo formato.
#XTranslate .BFWIdOper     => 1
#XTranslate .BFWAlmox      => 2
#XTranslate .BFWProduto    => 3
#XTranslate .BFWLote       => 4
#XTranslate .BFWEndereco   => 5
#XTranslate .BFWQuantidade => 6
#XTranslate .BFWOperacao   => 7
#XTranslate .BFWResultado  => 8
#XTranslate .BFWObs        => 9
#XTranslate .BFWStatusFull => 10
#XTranslate .BFWQtColunbas => 10
// 1 - Almoxarifado
// 2 - Codigo produto
// 3 - Lote
// 4 - Endereco (do FullWMS)
// 5 - Quantidade
// 6 - Operacao: [B]loquear ou [L]iberar
// 7 - Para retorno da funcao: .T.=executou com exito; .F.=nao executou
// 8 - Para retorno da funcao: Observacoes/Descritivo de possiveis erros.
// 9 - Retorno do campo 'status' do FullWMS

// --------------------------------------------------------------------------
User Function BlEstF (_oParmSolBloq as json, _nTimeout as numeric)
	local _aAreaAnt   := U_ML_SRArea ()
	local _lContinua  := .T.
	local _nLock      := 0
	local _lTelaParaSelecao := .F.
	local _oSQL       := NIL
	local _aZBHSemRetorno := {}
	local _nIdxZBHSemRetorno := 0
	local _aStatFull  := {}
//	private _oListaSolBloq := JsonObject():New()
	private _sLinkSrv := ''
	
	if cEmpAnt + cFilAnt != '0101'
		u_help ("Esta rotina nao se aplica a esta empresa/filial.",, .t.)
		_lContinua = .F.
	endif

	if _lContinua
		_sLinkSrv = U_LkServer ('FULLWMS_AX01')
		if empty (_sLinkSrv)
			u_help ("Linked server para o FullWMS nao definido. Impossivel continuar.",, .t.)
			_lContinua = .F.
		endif
	endif

	// Inicialmente vou usar controle de semaforo, pois preciso ter identificadores
	// unicos, bem como quero ficar aguardando o retorno do FullWMS. Depois veremos
	// como se comporta...
	if _lContinua
		_nLock := U_Semaforo ("ZBH" + cEmpAnt + cFilAnt)
		if _nLock == 0
			u_help ("Nao foi possivel obter acesso exclusivo a esta rotina nesta empresa/filial.")
			_lContinua = .F.
		endif
	endif

	// Jah tive casos em que o FullWMS processou mais tarde (por erro na minha
	// view, queda da sessao do usuario que aguardava o bloqueio, Fullsinc
	// estava parado, etc.). Entao optei por dar uma varrida nos registros
	// pendentes do SZH e ver o que fazer com eles.
	if _lContinua
		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := ""
		_oSQL:_sQuery += "SELECT R_E_C_N_O_"
		_oSQL:_sQuery +=  " FROM " + RetSQLName ("ZBH") + " ZBH"
		_oSQL:_sQuery += " WHERE ZBH.D_E_L_E_T_ = ''"
		// quero conferir todas as filiais ---> _oSQL:_sQuery +=   " AND ZBH.ZBH_FILIAL = '" + xfilial ("ZBH") + "'"
		_oSQL:_sQuery +=   " AND ZBH.ZBH_RESULT = ''"
		_oSQL:_sQuery += " ORDER BY ZBH.ZBH_IDOPER"
		_aZBHSemRetorno := aclone (_oSQL:Qry2Array (.f., .f.))
		for _nIdxZBHSemRetorno = 1 to len (_aZBHSemRetorno)
			zbh -> (dbgoto (_aZBHSemRetorno [_nIdxZBHSemRetorno, 1]))
			U_Log2 ('aviso', '[' + procname () + "]Encontrei ZBH_IDOPER = '" + zbh -> zbh_idoper + "' com o campo ZBH_RESULT vazio.")
			if empty (zbh -> zbh_result)  // Soh pra ter certeza, sacumeh, gato escaldado... morre!
				_oSQL := ClsSQL ():New ()
				_oSQL:_sQuery := ""
				_oSQL:_sQuery += "SELECT status, descr_erro"
				_oSQL:_sQuery +=  " FROM tb_wms_bloqueios"
				_oSQL:_sQuery += " WHERE bloqueio_id = '" + zbh -> zbh_idoper + "'"
				_oSQL:_sQuery +=   " AND cod_item    = '" + zbh -> zbh_produt + "'"  // mais pra garantir que nao pegue um registro indevido
				_oSQL:_sQuery +=   " AND endereco    = '" + zbh -> zbh_posF   + "'"  // mais pra garantir que nao pegue um registro indevido
				_oSQL:Log ('[' + procname () + ']')
				_aStatFull = _oSQL:RetFixo (1, "ao consultar o status do ID '" + zbh -> zbh_idoper + "' na tabela tb_wms_bloqueios.", .T.)
				if len (_aStatFull) == 1
					reclock ("ZBH", .F.)
					zbh -> zbh_result = left (_aStatFull [1, 1], 1)
					msunlock ()
					U_Log2 ('info', '[' + procname () + "]Alterei ZBH_RESULT para '" + zbh -> zbh_result + "'")
				else
					u_log2 ('erro', "Nao consegui verificar o status da solicitacao '" + zbh -> zbh_idoper + "'",, .t.)
				endif
			endif
		next
	endif


	// Se nao recebi uma array com itens, abro tela para o usuario selecionar.
	if _lContinua
		_lTelaParaSelecao = .F.
		if valtype (_oParmSolBloq) != 'U'
			if valtype (_oParmSolBloq) != 'J'
				u_help ("Parametro com itens a bloquear/desbloquear deve ser do tipo JSON",, .t.)
				_lContinua = .F.
			endif
		else
			_lTelaParaSelecao = .T.
		endif

		if _lTelaParaSelecao
			_oParmSolBloq = JsonObject():New()
			processa ({|| _Tela (@_oParmSolBloq)}, "Verificando estoque FullWMS")

			U_Log2 ('debug', '[' + procname () + ']_oParmSolBloq que retornou da tela:')
			U_Log2 ('debug', _oParmSolBloq)

		endif
		if len (_oParmSolBloq) > 0
			processa ({|| _Executa (_oParmSolBloq, _nTimeout)}, "Gerando solicitacoes ao FullWMS")
		endif
	endif

	// Libera semaforo
	U_Semaforo (_nLock)

	U_ML_SRArea (_aAreaAnt)
return _lContinua


// --------------------------------------------------------------------------
// Tela para o usuario selecionar enderecos a (des)bloquear
static function _Tela (_oListaSolBloq as json)
	local _lContinua := .T.
	local _sProdIni := ''
	local _sProdFim := ''
	local _sLoteIni := ''
	local _sLoteFim := ''
	local _sEndIni := ''
	local _sEndFim := ''
	local _oSQL := NIL
	local _aSldFull  := {}
	local _nIdxSldFull  := {}
	local _aColsF3 := {}
	local _aListaSolBloq := {}
//	local _oListaSolBloq := JsonObject():New()
	local _oSolBloq      := NIL
	private cPerg := 'BLESTF'

	_aColsF3 = {}
	aadd (_aColsF3, {2, 'Endereco',   60, ''})
	aadd (_aColsF3, {3, 'Lote',       60, ''})
	aadd (_aColsF3, {4, 'Produto',    60, ''})
	aadd (_aColsF3, {5, 'Quantidade', 30, '@E 999,999,999.9999'})
	aadd (_aColsF3, {6, 'Situacao',   30, ''})

	_ValidPerg ()
//	do while _lContinua
		_lContinua = pergunte (cPerg, .t.)

		// Busca enderecos dos produtos/lotes existentes no FullWMS
		if _lContinua

			// O Oracle me parece mais enjoado com strings vazias. Preciso enviar um espaco em branco.
			_sProdIni = iif (empty (alltrim (mv_par02)), ' ', alltrim (mv_par02))
			_sProdFim = iif (empty (alltrim (mv_par03)), ' ', alltrim (mv_par03))
			_sLoteIni = iif (empty (alltrim (mv_par04)), ' ', alltrim (mv_par04))
			_sLoteFim = iif (empty (alltrim (mv_par05)), ' ', alltrim (mv_par05))
			_sEndIni  = iif (empty (alltrim (mv_par06)), ' ', alltrim (mv_par06))
			_sEndFim  = iif (empty (alltrim (mv_par07)), ' ', alltrim (mv_par07))

			_oSQL := ClsSQL ():New ()
			_oSQL:_sQuery := "select 0 as OK, ENDERECO, LOTE, ITEM_COD_ITEM_LOG as PRODUTO, QTD, SITUACAO_LOTE"
			_oSQL:_sQuery += " FROM openquery (" + _sLinkSrv + ","
			_oSQL:_sQuery += " 'select ENDERECO, LOTE, ITEM_COD_ITEM_LOG, QTD, SITUACAO_LOTE"
			_oSQL:_sQuery +=    " from v_alianca_estoques"
			_oSQL:_sQuery +=   " where empr_codemp       = 1"
			_oSQL:_sQuery +=     " and item_cod_item_log between ''" + _sProdIni + "'' and ''" + _sProdFim + "''"
			_oSQL:_sQuery +=     " and lote              between ''" + _sLoteIni + "'' and ''" + _sLoteFim + "''"
			_oSQL:_sQuery +=     " and endereco          between ''" + _sEndIni  + "'' and ''" + _sEndFim  + "''"
			if mv_par08 == 1  // Mostrar apenas itens operaveis
				if mv_par01 == 1  // Usuario quer bloquear: mostrarei apenas os nao bloqueados
					_oSQL:_sQuery += " and situacao_lote like ''L%''"
				else  // Usuario quer debloquear: mostrarei apenas os bloqueados
					_oSQL:_sQuery += " and situacao_lote like ''B%''"
				endif
			endif
			_oSQL:_sQuery += " ')"
			_oSQL:Log ('[' + procname () + ']')
			_aSldFull := aclone (_oSQL:Qry2Array (.f., .f.))
			if len (_aSldFull) == 0
				u_help ("Nao foi encontrado nenhum item/lote/endereco com os parametros informados.",, .t.)
				_lContinua = .F.
			endif
		endif
		if _lContinua
			for _nIdxSldFull = 1 to len (_aSldFull)
				_aSldFull [_nIdxSldFull, 1] = .F.
			next

			// Selecao dos enderecos
			U_MbArray (@_aSldFull, 'Selecione enderecos a ' + iif (mv_par01 == 2, 'des', '') + 'bloquear', _aColsF3, 1, NIL, NIL, '.t.', {})

			for _nIdxSldFull = 1 to len (_aSldFull)
				if _aSldFull [_nIdxSldFull, 1]
					_oSolBloq = JsonObject():New()
					_oSolBloq ['IdOper']     = ''
					_oSolBloq ['Almox']      = '01'
					_oSolBloq ['Endereco']   = alltrim (_aSldFull [_nIdxSldFull, 2])
					_oSolBloq ['Lote']       = alltrim (_aSldFull [_nIdxSldFull, 3])
					_oSolBloq ['Produto']    = alltrim (_aSldFull [_nIdxSldFull, 4])
					_oSolBloq ['Quantidade'] = _aSldFull [_nIdxSldFull, 5]
					_oSolBloq ['Operacao']   = iif (mv_par01 == 1, 'B', 'L')
					_oSolBloq ['Resultado']  = .f.
					_oSolBloq ['Obs']        = ''
					_oSolBloq ['StatusFull'] = ''
					aadd (_aListaSolBloq, _oSolBloq)
				endif
			next
			_oListaSolBloq:Set (_aListaSolBloq)
		endif
//		if _lContinua .and. U_MsgNoYes ("Confirma a execucao?")
//			_lContinua = _Executa (_oListaSolBloq)
//		endif
//	enddo

			U_Log2 ('debug', '[' + procname () + ']_oListaSolBloq que pretendo retornar da tela:')
			U_Log2 ('debug', _oListaSolBloq)

return _oListaSolBloq


// --------------------------------------------------------------------------
// Processa a array de itens
static function _Executa (_oListaSolBloq as json, _nTimeout as numeric)
	local _lContinua := .T.
//	local _nItem     := 0
	local _oSQL      := NIL
	local _aSldFull  := {}
	local _sIdOper   := ''
	local _nSolBloq  := 0
	local _oSolBloq  := NIL
	local _sErros    := ''
	local _nQtSolOK  := 0
	local _nQtSolErr := 0

	U_Log2 ('debug', '[' + procname () + ']' + _oListaSolBloq:toJson ())

	// Validacoes antes de enviar ao FullWMS.
	_sErros = ''

	// Vou partir de um primeiro ID e apenas incrementar para todos os itens.
	// Como estou trabalhando com semaforo, nao deve ocorrer situacao de outra
	// sessao usando os mesmos IDs.
	_sIdOper = _GeraID ()
	
	procregua (len (_oListaSolBloq))
	sb1 -> (dbsetorder (1))
	for _nSolBloq = 1 to len (_oListaSolBloq)
		incproc ('Verificando item ' + cvaltochar (_nSolBloq))

		// Ateh prova em contrario, todas as solicitacoes podem ser enviadas.
		_oListaSolBloq [_nSolBloq]['PodeEnviar'] = .T.

		// Preenche um ID para cada solicitacao
		_oListaSolBloq [_nSolBloq]['IdOper'] = _sIdOper
		_sIdOper = soma1 (_sIdOper)

		// Instancia uma solicitacao da lista, para analisar seus dados.
		_oSolBloq := _oListaSolBloq [_nSolBloq]
//		U_Log2 ('debug', '[' + procname () + ']Analisando: ' + _oSolBloq:toJson ())

		if _oSolBloq ['Almox'] != '01'
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += 'Esta rotina gera bloqueio apenas para o almoxarifado 01."
		endif
		if ! sb1 -> (dbseek (xfilial ("SB1") + _oSolBloq ['Produto'], .f.))
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += 'Cadastro do produto nao localizado!'
		endif
// Ainda tenho esperanca de, um dia, habilitar este bloco!
//		if sb1 -> b1_rastro != 'L'
//			_oSolBloq ['PodeEnviar'] = .F.
//			_oSolBloq ['Obs'] += 'Produto nao usa controle de lotes no Protheus.'
//		endif
		if sb1 -> b1_vafullw != 'S'
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Produto nao eh controlado pelo FullWMS."
		endif
		if empty (_oSolBloq ['Lote'])
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Lote deve ser informado."
		endif
		if empty (_oSolBloq ['Endereco'])
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Endereco (do FullWMS) deve ser informado."
		endif

		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := "select QTD, SITUACAO_LOTE"
		_oSQL:_sQuery += " FROM openquery (" + _sLinkSrv + ","
		_oSQL:_sQuery += " 'select QTD, SITUACAO_LOTE"
		_oSQL:_sQuery +=    " from v_alianca_estoques"
		_oSQL:_sQuery +=   " where empr_codemp       = 1"
		_oSQL:_sQuery +=     " and item_cod_item_log = ''" + alltrim (_oSolBloq ['Produto']) + "''"
		_oSQL:_sQuery +=     " and lote              = ''" + alltrim (_oSolBloq ['Lote']) + "''"
		_oSQL:_sQuery +=     " and endereco          = ''" + alltrim (_oSolBloq ['Endereco'])  + "''"
		_oSQL:_sQuery += " ')"
	//	_oSQL:Log ('[' + procname () + ']')
		_aSldFull := aclone (_oSQL:Qry2Array (.f., .f.))
	//	U_Log2 ('debug', _aSldFull)
		if len (_aSldFull) == 0
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Lote '" + alltrim (_oSolBloq ['Lote']) + "' / endereco '" + alltrim (_oSolBloq ['Endereco']) + "' nao localizado no FullWMS."
		endif
		if _aSldFull [1, 1] != _oSolBloq ['Quantidade']
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Saldo do endereco no FullWMS = " + cvaltochar (_aSldFull [1, 1]) + ". Voce deve informar a mesma quantidade, pois o FullWMS nao faz bloqueio parcial de enderecos."
		endif
		if _oSolBloq ['Operacao'] == 'B' .and. left (_aSldFull [1, 2], 1) == 'B'
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Endereco ja se encontra bloqueado no FullWMS."
		endif
		if _oSolBloq ['Operacao'] == 'L' .and. left (_aSldFull [1, 2], 1) == 'L'
			_oSolBloq ['PodeEnviar'] = .F.
			_oSolBloq ['Obs'] += "Endereco ja se encontra liberado no FullWMS."
		endif

		if ! _oSolBloq ['PodeEnviar']
			_sErros += "Linha " + cvaltochar (_nSolBloq) + " produto " + alltrim (_oSolBloq ['Produto']) + ": " + _oSolBloq ['Obs'] + '; '
		endif

//		// DURANTE O DESENVOLVIMENTO, PARA AJUDAR NO DEBUG
//		IF ! _oSolBloq ['PodeEnviar']
//			_oSQL:Log ('[' + procname () + ']')
//			U_Log2 ('debug', _aSldFull)
//		ENDIF
	next

//	U_Log2 ('debug', '[' + procname () + ']Apos analise:' + _oListaSolBloq:toJson ())

	// Qualquer item com aviso de erro invalida todos os demais.
	if ! empty (_sErros)
		u_help (_sErros,, .t.)
		_lContinua = .F.
	endif

	// Gravacao dos dados para posterior disponibilizacao para o FullWMS
	if _lContinua
		U_Log2 ('debug', '[' + procname () + ']_oListaSolBloq antes de gravar no ZBH:')
		U_Log2 ('debug', _oListaSolBloq)

		procregua (len (_oListaSolBloq))
		for _nSolBloq = 1 to len (_oListaSolBloq)
			incproc ('Enviando solicitacao ' + cvaltochar (_nSolBloq) + ' para o FullWMS')

			// Instancia uma solicitacao da lista, para analisar seus dados.
			_oSolBloq := _oListaSolBloq [_nSolBloq]

		//	U_Log2 ('debug', '[' + procname () + ']Estaria gravando aqui:')
		//	U_Log2 ('debug', _oSolBloq)
			reclock ("ZBH", .T.)
			zbh -> zbh_filial = xfilial ("ZBH")
			zbh -> zbh_idOper = _oSolBloq ['IdOper']  // Manter aqui consistencia com a view v_wms_bloqueios.
			zbh -> zbh_produt = _oSolBloq ['Produto']
			zbh -> zbh_lote   = _oSolBloq ['Lote']
			zbh -> zbh_posf   = _oSolBloq ['Endereco']
			zbh -> zbh_quant  = _oSolBloq ['Quantidade']
			zbh -> zbh_oper   = _oSolBloq ['Operacao']
			zbh -> zbh_UsuSol = cUserName
			zbh -> zbh_data   = date ()
			zbh -> zbh_hora   = time ()
			msunlock ()
			U_Log2 ('debug', '[' + procname () + ']ZBH_IdOper ' + zbh -> zbh_idOper + ' criado para item ' + zbh -> zbh_produt + ' Operacao: ' + zbh -> zbh_oper + ' endereco: ' + zbh -> zbh_posF)
		next
	endif

	// Aguarda em loop por um retorno do FullWMS
	if _lContinua
		processa ({||_Aguarda (_oListaSolBloq, _nTimeout), "Aguardando retorno do FullWMS"})
		U_Log2 ('debug', '[' + procname () + ']_oListaSolBloq depois da funcao de aguarde:')
		U_Log2 ('debug', _oListaSolBloq)
	endif

	// Varre a lista de solicitacoes passando o resultado para a tabela ZBH.
	if _lContinua
		zbh -> (dbsetorder (1))  // ZBH_FILIAL, ZBH_IDOPER, R_E_C_N_O_, D_E_L_E_T_
		for _nSolBloq = 1 to len (_oListaSolBloq)
			U_Log2 ('debug', '[' + procname () + ']Verificando se a solicitacao ' + cvaltochar (_nSolBloq) + ' foi atendida.')
			if ! zbh -> (dbseek (xfilial ("ZBH") + _oListaSolBloq [_nSolBloq]['IdOper'], .F.))
				u_help ("Solicitacao de (des)bloqueio '" + _oListaSolBloq [_nSolBloq]['IdOper'] + "' nao localizada na tabela ZBH!",, .t.)
			else
				reclock ("ZBH", .F.)
				zbh -> zbh_result = left (_oListaSolBloq [_nSolBloq]['StatusFull'], 1)
				msunlock ()
				if zbh -> zbh_result == '1'
					_nQtSolOK ++
				endif
				if zbh -> zbh_result != '1'
					_nQtSolErr ++
				endif
			endif
		next
		u_help (cvaltochar (_nQtSolOK) + ;
			" de " + cvaltochar (len (_oListaSolBloq)) + ;
			" solicitacoes processadas com sucesso. " + ;
			iif (_nQtSolErr > 0, cvaltochar (_nQtSolErr) + ' ERROS.', ''))
	endif

return _lContinua


// --------------------------------------------------------------------------
// Aguarda pelo retorno do FullWMS.
static function _Aguarda (_oListaSolBloq as json, _nTimeout as numeric)
	local _sHrIni    := ''
	local _sTempo    := ''
	local _sMaxTempo := '00:02:30'
	local _oSQL      := NIL
	local _sListaIDs := ''
	local _aRetFull  := {}
	local _nRetFull  := 0
	local _nSolBloq  := 0
	local _lTodosComRetorno := .F.

	// Gera lista dos IDs a verificar. Manter conformidade com a view v_wms_bloqueios
	// e com a tabela tb_wms_bloqueios.
	_sListaIDs = ''
	for _nSolBloq = 1 to len (_oListaSolBloq)
		_sListaIDs += "'" + _oListaSolBloq [_nSolBloq]['IdOper'] + "'" + iif (_nSolBloq < len (_oListaSolBloq), ',', '')

		// Inicialmente todos os itens serao considerados 'com erro' ateh
		// conseguir retorno do FullWMS.
		_oListaSolBloq [_nSolBloq]['Resultado'] = .F.
	next

	_oSQL := ClsSQL ():New ()
	_oSQL:_sQuery := "SELECT bloqueio_id, status, descr_erro"
	_oSQL:_sQuery +=  " FROM tb_wms_bloqueios"
	_oSQL:_sQuery += " WHERE bloqueio_id in (" + _sListaIDs + ")"
	_oSQL:Log ('[' + procname () + ']')

	_sHrIni = time ()
	procregua (100)
	do while .t.
		_sTempo = ElapTime (_sHrIni, time ())
		incproc (_sTempo + ' (tempo limite ' + _sMaxTempo + ')')
		U_Log2 ('debug', '[' + procname () + ']Aguardando retorno do FullWMS  ' + ElapTime (_sTempo, _sMaxTempo))
		
		// Como o FullSinc roda (por configuracao nossa) a cada 1 minuto, nao
		// adianta bombardear o banco verificando a cada pouco.
		sleep (10000)

		// Verifica retornos do FulLWMS e vai preenchendo na array original de bloqueios.
		// Poderia ler um a um via SQL, mas acho que ler todos em uma consulta unica
		// vai dar melhor performance no final.
		_aRetFull = aclone (_oSQL:Qry2Array (.f., .f.))
//		U_Log2 ('debug', _aRetFull)
		for _nRetFull = 1 to len (_aRetFull)
//			U_Log2 ('debug', '[' + procname () + ']Lendo linha ' + cvaltochar (_nRetFull) + ' do retorno do Full')
			for _nSolBloq = 1 to len (_oListaSolBloq)
//				U_Log2 ('debug', '[' + procname () + ']   Comparando com a solicitacao ' + cvaltochar (_nSolBloq))
				if _oListaSolBloq [_nSolBloq]['IdOper'] == _aRetFull [_nRetFull, 1]
//					U_Log2 ('debug', '[' + procname () + ']   Encontrei')
					_oListaSolBloq [_nSolBloq]['StatusFull'] = alltrim (_aRetFull [_nRetFull, 2])
					if alltrim (_aRetFull [_nRetFull, 2]) == '1'
						_oListaSolBloq [_nSolBloq]['Resultado'] = .t.
					elseif alltrim (_aRetFull [_nRetFull, 2]) == '9'
						_oListaSolBloq [_nSolBloq]['Resultado'] = .f.
						_oListaSolBloq [_nSolBloq]['Obs'] = alltrim (_aRetFull [_nRetFull, 3])
					endif
					exit
				endif
			next
		next

		// Se todos os itens tiveram retorno, posso cair fora do loop.
		_lTodosComRetorno = .T.
		for _nSolBloq = 1 to len (_oListaSolBloq)
			if empty (_oListaSolBloq [_nSolBloq]['StatusFull'])
				U_Log2 ('debug', '[' + procname () + ']Ainda tenho a solicitacao ' + cvaltochar (_nSolBloq) + ' sem retorno do Full')
				_lTodosComRetorno = .F.
				exit
			endif
		next
		if _lTodosComRetorno
			exit
		endif

		if _sTempo >= _sMaxTempo
			u_help ("Sem retorno do FullWMS em tempo habil.",, .t.)
			exit
		endif
	enddo
return


// --------------------------------------------------------------------------
// Gera identificador unico para cada registro. Isso por que vai ser usado
// como chave na v_wms_blqueios e tb_wms_bloqueios (interface com o FullWMS).
static function _GeraID ()
	local _oSQL := NIL
	local _sRet := ''

	_oSQL := ClsSQL ():New ()
	_oSQL:_sQuery := ""
	_oSQL:_sQuery += " SELECT MAX (ZBH_IDOPER)"
	_oSQL:_sQuery +=   " FROM " + RetSQLName ("ZBH")
	_oSQL:_sQuery +=  " WHERE D_E_L_E_T_ = ''"
	// NAO QUERO a filial ---> _oSQL:_sQuery +=    " AND ZBH_FILIAL = '" + xfilial ("ZBH") + "'"
	//_oSQL:Log ()
	_sRet = _oSQL:RetQry ()
	if empty (_sRet)
		_sRet = strzero (1, tamsx3 ("ZBH_IDOPER")[1])
	else
		_sRet = soma1 (_sRet)
	endif
return _sRet


// --------------------------------------------------------------------------
// Cria Perguntas no SX1
Static Function _ValidPerg ()
	local _aRegsPerg := {}
	local _aDefaults := {}
	
	//                     PERGUNT                           TIPO TAM DEC VALID F3     Opcoes                       Help
	aadd (_aRegsPerg, {01, "Operacao a fazer              ", "N",  1, 0,  "",   "   ", {'Bloquear', 'Desbloquear'}, ""})
	aadd (_aRegsPerg, {02, "Produto inicial               ", "C", 15, 0,  "",   "SB1", {},                          ""})
	aadd (_aRegsPerg, {03, "Produto final                 ", "C", 15, 0,  "",   "SB1", {},                          ""})
	aadd (_aRegsPerg, {04, "Lote (no FulLWMS) inicial     ", "C", 10, 0,  "",   "SB8", {},                          ""})
	aadd (_aRegsPerg, {05, "Lote (no FulLWMS) final       ", "C", 10, 0,  "",   "SB8", {},                          ""})
	aadd (_aRegsPerg, {06, "Endereco (no FullWMS) inicial ", "C",  7, 0,  "",   "",    {},                          ""})
	aadd (_aRegsPerg, {07, "Endereco (no FullWMS) final   ", "C",  7, 0,  "",   "",    {},                          ""})
	aadd (_aRegsPerg, {08, "Mostrar quais itens           ", "N",  1, 0,  "",   "   ", {'Operaveis', 'Todos'},      ""})
	U_ValPerg (cPerg, _aRegsPerg, {}, _aDefaults)
Return
