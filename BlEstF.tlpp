// Programa...: BlEstF
// Autor......: Robert Koch
// Data.......: 29/10/2023
// Descricao..: Interface para solicitar bloqueio/desbloqueio de lotes com FullWMS
//
// Historico de alteracoes:
//

// Se a funcao chamadora quiser me passar itens a processar, deve estar neste mesmo formato.
#XTranslate .BloqFullWAlmox      => 1
#XTranslate .BloqFullWIdBloq     => 2
#XTranslate .BloqFullWProduto    => 3
#XTranslate .BloqFullWLote       => 4
#XTranslate .BloqFullWEndereco   => 5
#XTranslate .BloqFullWQuantidade => 6
#XTranslate .BloqFullWOperacao   => 7
#XTranslate .BloqFullWResultado  => 8
#XTranslate .BloqFullWObs        => 9
#XTranslate .BloqFullWStatusFull => 10
#XTranslate .BloqFullWQtColunbas => 10
// 1 - Almoxarifado
// 2 - Codigo produto
// 3 - Lote
// 4 - Endereco (do FullWMS)
// 5 - Quantidade
// 6 - Operacao: [B]loquear ou [L]iberar
// 7 - Para retorno da funcao: .T.=executou com exito; .F.=nao executou
// 8 - Para retorno da funcao: Observacoes/Descritivo de possiveis erros.
// 9 - Retorno do campo 'status' do FullWMS

// --------------------------------------------------------------------------
User Function BlEstF (_aBlq)
	local _lContinua  := .T.
	local _nLock      := 0
	local _aAreaAnt   := U_ML_SRArea ()
	private _aBloq    := _aBlq
	private _sLinkSrv := ''
	
	if cEmpAnt + cFilAnt != '0101'
		u_help ("Esta rotina nao se aplica a esta empresa/filial.",, .t.)
		_lContinua = .F.
	endif

	if _lContinua
		_sLinkSrv = U_LkServer ('FULLWMS_AX01')
		if empty (_sLinkSrv)
			u_help ("Linked server para o FullWMS nao definido. Impossivel continuar.",, .t.)
			_lContinua = .F.
		endif
	endif

	// Inicialmente vou usar controle de semaforo, pois preciso ter identificadores
	// unicos, bem como quero ficar aguardando o retorno do FullWMS. Depois veremos
	// como se comporta...
	if _lContinua
		_nLock := U_Semaforo ("ZBH" + cEmpAnt + cFilAnt)
		if _nLock == 0
			u_help ("Nao foi possivel obter acesso exclusivo a esta rotina nesta empresa/filial.")
			_lContinua = .F.
		endif
	endif

	// Se nao recebi uma array com itens, abro tela para o usuario selecionar.
	if _lContinua
		if valtype (_aBloq) == 'A'
			_lContinua = _Executa ()
		else
			if aviso ("Selecione o que deseja fazer", {"Bloquear", "Desbloquear"}, 3, "Selecione acao") == 1
				//_lContinua = _Bloq ()
			else
				//_lContinua = _Desbloq ()
			endif
		endif
	endif

	// Libera semaforo
	U_Semaforo (_nLock)

	U_ML_SRArea (_aAreaAnt)
return _lContinua


// --------------------------------------------------------------------------
// Processa a array de itens
static function _Executa ()
	local _lContinua := .T.
	local _nItem     := 0
	local _oSQL      := NIL
	local _aSldFull  := {}
	local _sIdOper   := ''

	// Marca todas as linhas como 'ok' para posterior validacao.
	for _nItem = 1 to len (_aBloq)
		_aBloq [_nItem, .BloqFullWResultado] = .t.
	next

	// Validacoes antes de enviar ao FullWMS.
	sb1 -> (dbsetorder (1))
	_nItem = 1
	do while _lContinua .and. _nItem <= len (_aBloq)
		if _aBloq [_nItem, 1] != '01'
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += 'Esta rotina gera bloqueio apenas para o almoxarifado 01."
		endif
		if ! sb1 -> (dbseek (xfilial ("SB1") + _aBloq [_nItem, 2], .f.))
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += 'Cadastro do produto nao localizado!'
		endif
		if sb1 -> b1_rastro != 'L'
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += 'Produto nao usa controle de lotes.'
		endif
		if sb1 -> b1_vafullw != 'S'
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Produto nao eh controlado pelo FullWMS."
		endif
		if empty (_aBloq [_nItem, 3])
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Lote deve ser informado."
		endif
		if empty (_aBloq [_nItem, 4])
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Endereco (no FullWMS) deve ser informado."
		endif

		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := "select QTD, SITUACAO_LOTE"
		_oSQL:_sQuery += " FROM openquery (" + _sLinkSrv + ","
		_oSQL:_sQuery += " 'select QTD, SITUACAO_LOTE"
		_oSQL:_sQuery +=    " from v_alianca_estoques"
		_oSQL:_sQuery +=   " where empr_codemp       = 1"
		_oSQL:_sQuery +=     " and item_cod_item_log = ''" + alltrim (_aBloq [_nItem, 2]) + "''"
		_oSQL:_sQuery +=     " and lote              = ''" + alltrim (_aBloq [_nItem, 3]) + "''"
		_oSQL:_sQuery +=     " and endereco          = ''" + alltrim (_aBloq [_nItem, 4])  + "''"
		_oSQL:_sQuery += " ')"
		_oSQL:Log ('[' + procname () + ']')
		_aSldFull := aclone (_oSQL:Qry2Array (.f., .f.))
		U_Log2 ('debug', _aSldFull)
		if len (_aSldFull) == 0
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Lote '" + alltrim (_aBloq [_nItem, 3]) + "' / endereco '" + alltrim (_aBloq [_nItem, 4]) + "' nao localizado no FullWMS."
		endif
		if _aSldFull [1, 1] != _aBloq [_nItem, 5]
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Saldo do endereco no FullWMS = " + cvaltochar (_aSldFull [1, 1]) + ". Voce deve informar a mesma quantidade, pois o FullWMS nao faz bloqueio parcial de enderecos."
		endif
		if _aBloq [_nItem, 6] == 'B' .and. left (_aSldFull [1, 2], 1) == 'B'
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Endereco ja se encontra bloqueado no FullWMS."
		endif
		if _aBloq [_nItem, 6] == 'L' .and. left (_aSldFull [1, 2], 1) == 'L'
			_aBloq [_nItem, .BloqFullWResultado] = .F.
			_aBloq [_nItem, 8] += "Endereco ja se encontra liberado no FullWMS."
		endif
		_nItem ++
	enddo

	// Qualquer item com aviso de erro invalida todos os demais.
	if _lContinua
		for _nItem = 1 to len (_aBloq)
			if ! _aBloq [_nItem, .BloqFullWResultado]
				U_Log2 ('erro', '[' + procname () + ']Abortando o processo por que a linha ' + cvaltochar (_nItem) + ' eh invalida.')
				_lContinua = .F.
				exit
			endif
		next
	endif

	// Gravacao dos dados para posterior disponibilizacao para o FullWMS
	if _lContinua
		_sIdOper = _GeraID ()
		for _nItem = 1 to len (_aBloq)
			reclock ("ZBH", .T.)
			zbh -> zbh_filial = xfilial ("ZBH")
			zbh -> zbh_idOper = _sIdOper
			zbh -> zbh_produt = _aBloq [_nItem, 2]
			zbh -> zbh_lote   = _aBloq [_nItem, 3]
			zbh -> zbh_posf   = _aBloq [_nItem, 4]
			zbh -> zbh_quant  = _aBloq [_nItem, 5]
			zbh -> zbh_oper   = _aBloq [_nItem, 6]
			msunlock ()
			U_Log2 ('debug', '[' + procname () + ']ZBH_IdOper ' + zbh -> zbh_idOper + ' criado para item ' + zbh -> zbh_produt)
		next
	endif

	// Aguarda em loop por um retorno do FullWMS
	if _lContinua
		_Aguarda ()
	endif

return _lContinua


// --------------------------------------------------------------------------
// Gera identificador unico para cada registro. Isso por que vai ser usado
// como chava na v_wms_blqueios e tb_wms_bloqueios (interface com o FullWMS).
static function _GeraID ()
	local _oSQL := NIL
	local _sRet := ''

	_oSQL := ClsSQL ():New ()
	_oSQL:_sQuery := ""
	_oSQL:_sQuery += " SELECT MAX (ZBH_IDOPER)"
	_oSQL:_sQuery +=   " FROM " + RetSQLName ("ZBH")
	_oSQL:_sQuery +=  " WHERE D_E_L_E_T_ = ''"
	_oSQL:_sQuery +=    " AND ZBH_FILIAL = '" + xfilial ("ZBH") + "'"
	//_oSQL:Log ()
	_sRet = _oSQL:RetQry ()
	if empty (_sRet)
		_sRet = strzero (1, tamsx3 ("ZBH_IDOPER")[1])
	endif
	_sRet = soma1 (_oSQL:RetQry ())
return _sRet


// --------------------------------------------------------------------------
// Aguarda pelo retorno do FullWMS.
static function _Aguarda ()
	local _sHrIni    := ''
	local _sTempo    := ''
	local _sMaxTempo := '00:00:30'
	local _oSQL      := NIL
	local _sListaIDs := ''
	local _nItem     := 0
	local _aRetFull  := {}
	local _nRetFull  := 0

	// Gera lista dos IDs a verificar
	_sListaIDs = ''
	for _nItem = 1 to len (_aBloq)
		_sListaIDs += "'" + xfilial ("SBH") + _aBloq [_nItem, 1] + "'" + iif (_nItem < len (_aBloq), ',', '')
	next

	_oSQL := ClsSQL ():New ()
	_oSQL:_sQuery := "SELECT bloqueio_id, status, descr_erro"
	_oSQL:_sQuery +=  " FROM tb_wms_bloqueios"
	_oSQL:_sQuery += " WHERE bloqueio_id in (" + _sListaIDs + ")"
	_oSQL:Log ('[' + procname () + ']')

	_sHrIni = time ()
	do while .t.
		_sTempo = ElapTime (_sHrIni, time ())
		U_Log2 ('debug', '[' + procname () + ']Aguardando retorno do FullWMS  ' + ElapTime (_sTempo, _sMaxTempo))
		MsgRun ("Aguardando retorno do FullWMS", ElapTime (_sTempo, _sMaxTempo), {|| allwaystrue ()})
		sleep (5000)

		// Verifica retornos do FulLWMS e vai preenchendo na array original de bloqueios.
		// Poderia ler um a um via SQL, mas acho que ler todos em uma consulta unica
		// vai dar melhor performance no final.
		_aRetFull = aclone (_oSQL:Qry2Array (.f., .f.))
		U_Log2 ('debug', _aRetFull)
		for _nRetFull = 1 to len (_aRetFull)
			_nItem = ascan (_aBloq, {|_aVal| _aVal [1] == _aRetFull [_nRetFull, 1]})
			if _nItem == 0
				u_help ("Encontrei o ID '" + _aRetFull [_nRetFull, 1] + "' no FullWMS e nao tenho ele no Protheus!",, .t.)
			else
				_aBloq [_nItem, 9] = _aRetFull [_nRetFull, 2]
				if alltrim (_aRetFull [_nRetFull, 2]) == '9'
					_aBloq [_nItem, .BloqFullWResultado] = .F.
					_aBloq [_nItem, 8] = _aRetFull [_nRetFull, 3]
				endif
			endif
		next

		// Se todos os itens tiveram retorno, posso cair fora do loop.
		if ascan (_aBloq, {|_aVal| empty (_aVal [9])}) == 0
			U_Log2 ('debug', '[' + procname () + ']Todos os itens tiveram retorno, posso cair fora do loop.')
			exit
		endif
		if _sTempo >= _sMaxTempo
			u_help ("Sem retorno do FullWMS em tempo habil. Cancelando operacao.",, .t.)
			exit
		endif
	enddo
	U_Log2 ('debug', '[' + procname () + ']_aBloq depois de sair do loop:')
	U_Log2 ('debug', _aBloq)
return
