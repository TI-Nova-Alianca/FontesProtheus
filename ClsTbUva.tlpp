// Programa:  ClsTbUva
// Autor:     Robert Koch
// Data:      22/05/2023 (inicio)
// Descricao: Declaracao de classe de representacao de tabelas de preco de uvas para safra.
//            Poderia trabalhar como uma include, mas prefiro declarar uma funcao de usuario
//            apenas para poder incluir no projeto e manter na pasta dos fontes.

// Tags para automatizar catalogo de customizacoes:
// #TipoDePrograma    #Classe
// #Descricao         #Representa tabelas de precos de uvas para compra de safra.
// #PalavasChave      #safra #uva #tabela_preco
// #TabelasPrincipais #ZX5 SB1
// #Modulos           #COOP

// Historico de alteracoes:
//

#Include "Protheus.ch"
#include "VA_INCLU.prw"
//#Include "TbiConn.ch"

// --------------------------------------------------------------------------
// Funcao declarada apenas para poder compilar este arquivo fonte.
user function ClsTbUva ()
return


// ==========================================================================
CLASS ClsTbUva

	// Declaracao das propriedades da Classe
	public data CodTabela  // Pode existir mais de uma tabela para cada safra (simulacoes, etc)
	public data Conducao   // [E]spaldeira, [L]atada
	public data Grupos     // Grupos de uvas cfe. tabela 13 do ZX5
	public data SubGrupos  // Subgrupos de uvas cfe. tabela 13 do ZX5
	public data Safra
	public data TipoPreco  // [E]ntrada, [C]ompra, [M]oc(CONAB)
	public data TipoUva    // [C]omum, [F]ina
	public data UltMsg     // Mensagens (geralmente de erro)
	public data Varied     // Array de atributos de cada variedade (para encontrar rapidamente)

	// Declaracao dos Metodos da classe
	public METHOD New ()
	public METHOD GeraAtrib ()
	public METHOD GeraHTM ()
	private METHOD SomaMsg ()
ENDCLASS


// --------------------------------------------------------------------------
// Construtor.
METHOD New (_sCodTab, _sTipoPrc, _sTipoUva, _sConduc) Class ClsTbUva

	// Gera atributos com valores default
	::GeraAtrib (_sCodTab, _sTipoPrc, _sTipoUva, _sConduc)
Return ::self


// --------------------------------------------------------------------------
// Alimenta os atributos da classe.
METHOD GeraAtrib (_sCodTab, _sTipoPrc, _sTipoUva, _sConduc) Class ClsTbUva
	local _lContinua := .T.
	local _aAreaAnt  := U_ML_SRArea ()
	local _oSQL      := NIL
//	local _nGrupo    := 0
	local _aDados    := {}
	local _nDado     := 0

	// Defaults
	::CodTabela = _sCodTab
	::Conducao  = _sConduc
	::Grupos    = {}
	::Safra     = ''
	::SubGrupos = {}
	::TipoPreco = _sTipoPrc
	::TipoUva   = _sTipoUva
	::UltMsg    = ''
	::Varied    = {}

	if empty (::CodTabela) .or. empty (::TipoPreco) .or. empty (::TipoUva) .or. empty (::Conducao)
		u_help ("Para instanciar uma tabela de precos de safra, deve-se informar seu codigo, tipo de preco (entrada/compra/MOC/...), tipo de uva (C/F), sistema de conducao (L/E).",, .t.)
		_lContinua = .F.
	endif

	// Gera uma lista de grupos relacionados ao tipo de uvas solicitado.
	if _lContinua
		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := "SELECT ZX5_13SAFR, ZX5_13GRUP, ZX5_13DESC, ZX5_13GBAS"
		_oSQL:_sQuery +=  " FROM " + RetSQLName ("ZX5") + " ZX5_13 "
		_oSQL:_sQuery += " WHERE ZX5_13.D_E_L_E_T_ = ''"
		_oSQL:_sQuery +=   " AND ZX5_13.ZX5_FILIAL = '" + xfilial ("ZX5") + "'"
		_oSQL:_sQuery +=   " AND ZX5_13.ZX5_TABELA = '13'"
		_oSQL:_sQuery +=   " AND ZX5_13.ZX5_13SAFR = '" + ::CodTabela + "'"
		_oSQL:_sQuery +=   " AND LEN (ZX5_13.ZX5_13GRUP) >= 3"  // Nao quero listar os 'grandes grupos'
		if ::TipoUva == 'C'
			_oSQL:_sQuery += " AND ZX5_13.ZX5_13GRUP like '1%'"  // Lista comuns
		elseif ::TipoUva == 'F' .and. ::Conducao == 'E'
			_oSQL:_sQuery += " AND ZX5_13.ZX5_13GRUP like '2%'"  // Lista finas espaldeira
		elseif ::TipoUva == 'F' .and. ::Conducao == 'L'
			_oSQL:_sQuery += " AND ZX5_13.ZX5_13GRUP like '3%'"  // Lista finas latadas
		endif
		_oSQL:_sQuery += " ORDER BY ZX5_13GRUP"
		_oSQL:Log ('[' + GetClassName (::Self) + '.' + procname () + ']')
		_aDados := aclone (_oSQL:Qry2Array (.f., .f.))
		U_Log2 ('debug', '[' + procname () + ']_aDados:')
		u_log (_aDados)
		if len (_aDados) == 0
			::SomaMsg ("Tabela de precos '" + ::CodTabela + "' nao existe, ou nao tem nenhum grupo de variedades informado.")
			_lContinua = .F.
		endif
	endif
	if _lContinua
		::Safra = _aDados [1, 1]
		if empty (::Safra)
			::SomaMsg ("Safra nao definida.")
			_lContinua = .F.
		endif
	endif
	
	// Alimenta array de grupos
	::Grupos = {}
	if _lContinua
		for _nDado = 1 to len (_aDados)
			aadd (::Grupos, array (.TbUvaGruposQtColunas))
			::Grupos [len (::Grupos), .TbUvaGruposCodigo]    = _aDados [_nDado, 2]
			::Grupos [len (::Grupos), .TbUvaGruposDescricao] = _aDados [_nDado, 3]
			::Grupos [len (::Grupos), .TbUvaGruposGrauBase]  = _aDados [_nDado, 4]
			U_Log2 ('debug', '[' + procname () + ']::Grupo adicionado:')
			U_Log2 ('debug', ::Grupos [len (::Grupos)])
		next
	endif

	// Alimenta array de variedades e seus principais atributos.
	if _lContinua
		_oSQL := ClsSQL ():New ()
		_oSQL:_sQuery := "SELECT ZX5_14.ZX5_14GRUP, ZX5_14PROD, SB1.B1_DESC, SB1.B1_VARUVA"
		_oSQL:_sQuery +=      ", SB1.B1_VACOR, SB1.B1_VATTR, SB1.B1_VAORGAN"
		_oSQL:_sQuery +=  " FROM " + RetSQLName ("ZX5") + " ZX5_14 "
		_oSQL:_sQuery +=      " ," + RetSQLName ("SB1") + " SB1 "
		_oSQL:_sQuery += " WHERE ZX5_14.D_E_L_E_T_ = ''"
		_oSQL:_sQuery +=   " AND ZX5_14.ZX5_FILIAL = '" + xfilial ("ZX5") + "'"
		_oSQL:_sQuery +=   " AND ZX5_14.ZX5_TABELA = '14'"
		_oSQL:_sQuery +=   " AND ZX5_14.ZX5_14SAFR = '" + ::CodTabela + "'"

		// Somente variedades dos grupos jah lidos.
		_oSQL:_sQuery +=   " AND ZX5_14.ZX5_14GRUP IN ("
		for _nDado = 1 to len (::Grupos)
			_oSQL:_sQuery += "'" + ::Grupos [_nDado, .TbUvaGruposCodigo] + "'" + iif (_nDado < len (::Grupos), ",", "")
		next
		_oSQL:_sQuery += ")"

		_oSQL:_sQuery +=   " AND SB1.D_E_L_E_T_    = ''"
		_oSQL:_sQuery +=   " AND SB1.B1_FILIAL     = '" + xfilial ("SB1") + "'"
		_oSQL:_sQuery +=   " AND SB1.B1_COD        = ZX5_14.ZX5_14PROD"
		_oSQL:_sQuery += " ORDER BY ZX5_14PROD"
		_oSQL:Log ('[' + GetClassName (::Self) + '.' + procname () + ']')
		_aDados := aclone (_oSQL:Qry2Array (.f., .f.))
	//	U_Log2 ('debug', '[' + procname () + ']_aDados:')
	//	u_log (_aDados)
		if len (_aDados) == 0
			::SomaMsg ("Nao encontrei nenhuma variedade para a tabela de precos '" + ::CodTabela + "'.")
			_lContinua = .F.
		else
			for _nDado = 1 to len (_aDados)
				aadd (::Varied, array (.TbUvaVariedQtColunas))
				::Varied [len (::Varied), .TbUvaVariedGrupo]    = _aDados [_nDado, 1]
				::Varied [len (::Varied), .TbUvaVariedCod]      = _aDados [_nDado, 2]
				::Varied [len (::Varied), .TbUvaVariedDesc]     = _aDados [_nDado, 3]
				::Varied [len (::Varied), .TbUvaVariedVarUva]   = _aDados [_nDado, 4]
				::Varied [len (::Varied), .TbUvaVariedCor]      = _aDados [_nDado, 5]
				::Varied [len (::Varied), .TbUvaVariedTintorea] = _aDados [_nDado, 6]
				::Varied [len (::Varied), .TbUvaVariedOrganica] = _aDados [_nDado, 7]
			next
			U_Log2 ('debug', 'Variedades:')
			U_Log2 ('debug', ::Varied)
		endif
	endif

	// Se deu algum problema, limpa o codigo da tabela para que o programa que
	// for usar o objeto possa testar.
	if ! _lContinua
		::CodTabela = ''
	endif

	U_ML_SRArea (_aAreaAnt)
return


// --------------------------------------------------------------------------
// Gera tabela em formato HTML
METHOD GeraHTM () Class ClsTbUva
	local _sHTM      := ''
	local _nTotCols  := 25
	local _nGrp13    := 0
	local _lTemConv  := .T.
	local _lTemBord  := .F.
	local _lTemEmCon := .F.
	local _lTemOrg   := .F.
	local _nColSpan  := 0
	local _aSubgrup  := {}
	local _nSubgrup  := 0
	local _nVaried   := 0

	if empty (::CodTabela)
		::SomaMsg ("Codigo de tabela nao definido. Impossivel gerar HTML.")
	else
		// dicas em https://www.w3schools.com/css/css_text_align.asp

		_sHTM := '<!DOCTYPE html><html><head><meta charset="1252"/><title>Tabela uva safra</title></head><body>'
		_sHTM += '<table width="80%" border="1" cellspacing="0" cellpadding="0" align="center">'
		
		// Linhas iniciais da tabela (descricao, tipos de uvas, datas, etc.
		_sHTM += '<tr>'
		_sHTM +=    '<th colspan=' + cvaltochar (_nTotCols) + ' align=left>' + alltrim (sm0 -> m0_nomecom) + '</th>'
		_sHTM += '</tr>'
		_sHTM += '<tr>'
			_sHTM +=    '<th colspan=' + cvaltochar (_nTotCols) + ' align=left>Tabela ' + ::CodTabela + ' (preço '
			if ::TipoPreco == 'E'
				_sHTM += 'de entrada'
			elseif ::TipoPreco == 'C'
				_sHTM += 'de compra'
			elseif ::TipoPreco == 'C'
				_sHTM += 'MOC'
			else
				_sHTM += '[OUTRAS NAO DEFINIDAS]'
			endif
			_sHTM += ')'
			_sHTM += ' - uvas ' + iif (::TipoUva == 'C', 'comuns', iif (::TipoUva == 'F', 'viniferas', '(SEM DEFINICAO)'))
			_sHTM += ' ' + iif (::Conducao == 'L', 'latadas', iif (::Conducao == 'E', 'espaldeira', '(SEM DEFINICAO)'))
			_sHTM += ' - safra ' + ::Safra + '</th>'
		_sHTM += '</tr>'
		_sHTM += '<tr>'
		_sHTM +=    '<th colspan=' + cvaltochar (_nTotCols) + ' align=left>Gerada em ' + dtoc (date ()) + ' - ' + time () + '</th>'
		_sHTM += '</tr>'

		// Linhas de titulos das colunas (nomes dos grupos, grau base, etc)
		_sHTM += '<tr>'
		_sHTM +=    '</th>'
		U_Log2 ('debug', '[' + procname () + ']Montando linha titulos grupos')
		_aSubgrup = {'Grau'}  // Vou adicionar subgrupos cfe. for encontrando eles.
		for _nGrp13 = 1 to len (::Grupos)
			U_Log2 ('debug', '[' + procname () + ']Gerando HTML para o grupo ' + ::Grupos [_nGrp13, .TbUvaGruposCodigo])
			U_Log2 ('debug', ::Grupos [_nGrp13] )


			// Verifica se tem uvas convencionais/bordadura/em conversao/orgenicas neste grupo.
			_lTemConv = .f.
			_lTemBord = .f.
			_lTemEmCon = .f.
			_lTemOrg = .F.
			_nColSpan = 0
			if ascan (::Varied, {|_aVal| _aVal [.TbUvaVariedGrupo] == ::Grupos [_nGrp13, .TbUvaGruposCodigo] .and. _aVal [.TbUvaVariedOrganica] == 'C'}) > 0
				_lTemConv = .T.
				_nColSpan ++
				aadd (_aSubgrup, 'Convencional')
			endif
			if ascan (::Varied, {|_aVal| _aVal [.TbUvaVariedGrupo] == ::Grupos [_nGrp13, .TbUvaGruposCodigo] .and. _aVal [.TbUvaVariedOrganica] == 'B'}) > 0
				_lTemBord = .T.
				_nColSpan ++
				aadd (_aSubgrup, 'Bordadura')
			endif
			if ascan (::Varied, {|_aVal| _aVal [.TbUvaVariedGrupo] == ::Grupos [_nGrp13, .TbUvaGruposCodigo] .and. _aVal [.TbUvaVariedOrganica] == 'E'}) > 0
				_lTemEmCon = .T.
				_nColSpan ++
				aadd (_aSubgrup, 'Em conversao')
			endif
			if ascan (::Varied, {|_aVal| _aVal [.TbUvaVariedGrupo] == ::Grupos [_nGrp13, .TbUvaGruposCodigo] .and. _aVal [.TbUvaVariedOrganica] == 'O'}) > 0
				_lTemOrg = .T.
				_nColSpan ++
				aadd (_aSubgrup, 'Organica')
			endif
			U_Log2 ('debug', '[' + procname () + ']_lTemConv = ' + cvaltochar (_lTemConv ))
			U_Log2 ('debug', '[' + procname () + ']_lTemBord = ' + cvaltochar (_lTemBord ))
			U_Log2 ('debug', '[' + procname () + ']_lTemEmCon= ' + cvaltochar (_lTemEmCon))
			U_Log2 ('debug', '[' + procname () + ']_lTemOrg  = ' + cvaltochar (_lTemOrg  ))
			U_Log2 ('debug', '[' + procname () + ']_nColSpan = ' + cvaltochar (_nColSpan ))
			U_Log2 ('debug', '[' + procname () + ']Subgrupos:')
			U_Log2 ('debug', _aSubgrup)

			// Linha com os nomes dos grupos
			_sHTM += '<th colspan=' + cvaltochar (_nColSpan) + ' align=center>Gr.' + alltrim (::Grupos [_nGrp13, .TbUvaGruposCodigo])
			_sHTM +=    '-' + alltrim (::Grupos [_nGrp13, .TbUvaGruposDescricao])
			_sHTM +=    ' (gb ' + cvaltochar (::Grupos [_nGrp13, .TbUvaGruposGrauBase]) + ')'
			_sHTM += '</th>'

			_sHTM += '</th>'
		next

		// Linha com os subgrupos (converc/bordadura/organ...)
		_sHTM += '<tr>'
		for _nSubgrup = 1 to len (_aSubgrup)
			_sHTM += '<th align=center>' + _aSubgrup [_nSubgrup] + '</th>'
		next
		_sHTM += '</tr>'


		for _nVaried = 1 to len (::Varied)
		next

		// Adiciona cada grau
		_sHTM += '<tr style="font-family:tahoma;font-size:12px">'


/*
		_sHTM +=    '<th align=center>13.0</th>'
		_sHTM +=    '<th align=left>Bordo</th>'
		_sHTM +=    '<th align=left>Bordo cnv</th>'
		_sHTM +=    '<th align=left>Bordo ord</th>'
		_sHTM +=    '<th align=left>Niagara</th>'
		_sHTM +=    '<th align=left>Niagara cnv</th>'
		_sHTM +=    '<th align=left>Niagara ord</th>'
		_sHTM +=    '<th align=left>Bordo</th>'
		_sHTM +=    '<th align=left>Bordo cnv</th>'
		_sHTM +=    '<th align=left>Bordo ord</th>'
		_sHTM +=    '<th align=left>Niagara</th>'
		_sHTM +=    '<th align=left>Niagara cnv</th>'
		_sHTM +=    '<th align=left>Niagara ord</th>'
		_sHTM +=    '<th align=left>Bordo</th>'
		_sHTM +=    '<th align=left>Bordo cnv</th>'
		_sHTM +=    '<th align=left>Bordo ord</th>'
		_sHTM +=    '<th align=left>Niagara</th>'
		_sHTM +=    '<th align=left>Niagara cnv</th>'
		_sHTM +=    '<th align=left>Niagara ord</th>'
		_sHTM +=    '<th align=left>Bordo</th>'
		_sHTM +=    '<th align=left>Bordo cnv</th>'
		_sHTM +=    '<th align=left>Bordo ord</th>'
		_sHTM +=    '<th align=left>Niagara</th>'
		_sHTM +=    '<th align=left>Niagara cnv</th>'
		_sHTM +=    '<th align=left>Niagara ord</th>'
		_sHTM += '</tr>'
		_sHTM += '<tr>'
		_sHTM +=    '<th/>'
		_sHTM +=    '<th align=left>Rubea</th>'
		_sHTM +=    '<th align=left>Rubea cnv</th>'
		_sHTM +=    '<th align=left>Rubea ord</th>'
		_sHTM +=    '<th align=left>Concord</th>'
		_sHTM +=    '<th align=left>Concord cnv</th>'
		_sHTM +=    '<th align=left>Concord ord</th>'
		_sHTM +=    '<th align=left>Rubea</th>'
		_sHTM +=    '<th align=left>Rubea cnv</th>'
		_sHTM +=    '<th align=left>Rubea ord</th>'
		_sHTM +=    '<th align=left>Concord</th>'
		_sHTM +=    '<th align=left>Concord cnv</th>'
		_sHTM +=    '<th align=left>Concord ord</th>'
		_sHTM +=    '<th align=left>Rubea</th>'
		_sHTM +=    '<th align=left>Rubea cnv</th>'
		_sHTM +=    '<th align=left>Rubea ord</th>'
		_sHTM +=    '<th align=left>Concord</th>'
		_sHTM +=    '<th align=left>Concord cnv</th>'
		_sHTM +=    '<th align=left>Concord ord</th>'
		_sHTM +=    '<th align=left>Rubea</th>'
		_sHTM +=    '<th align=left>Rubea cnv</th>'
		_sHTM +=    '<th align=left>Rubea ord</th>'
		_sHTM +=    '<th align=left>Concord</th>'
		_sHTM +=    '<th align=left>Concord cnv</th>'
		_sHTM +=    '<th align=left>Concord ord</th>'
		_sHTM += '</tr>'
		_sHTM += '<tr>'
		_sHTM +=    '<th align=center>13.0</th>'
		_sHTM +=    '<th align=right>1,5960</th>'
		_sHTM +=    '<th align=right>1,8354</th>'
		_sHTM +=    '<th align=right>2,4738</th>'
		_sHTM +=    '<th align=right>1,33</th>'
		_sHTM +=    '<th align=right>1,5295</th>'
		_sHTM +=    '<th align=right>2,2610</th>'
		_sHTM +=    '<th align=right>1,5960</th>'
		_sHTM +=    '<th align=right>1,8354</th>'
		_sHTM +=    '<th align=right>2,4738</th>'
		_sHTM +=    '<th align=right>1,33</th>'
		_sHTM +=    '<th align=right>1,5295</th>'
		_sHTM +=    '<th align=right>2,2610</th>'
		_sHTM +=    '<th align=right>1,5960</th>'
		_sHTM +=    '<th align=right>1,8354</th>'
		_sHTM +=    '<th align=right>2,4738</th>'
		_sHTM +=    '<th align=right>1,33</th>'
		_sHTM +=    '<th align=right>1,5295</th>'
		_sHTM +=    '<th align=right>2,2610</th>'
		_sHTM +=    '<th align=right>1,5960</th>'
		_sHTM +=    '<th align=right>1,8354</th>'
		_sHTM +=    '<th align=right>2,4738</th>'
		_sHTM +=    '<th align=right>1,33</th>'
		_sHTM +=    '<th align=right>1,5295</th>'
		_sHTM +=    '<th align=right>2,2610</th>'
		_sHTM += '</tr>'
*/
		_sHTM += '</table>'
		_sHTM += '</body></html>'
	endif
return _sHTM


// --------------------------------------------------------------------------
// Adiciona (sempre no inicio, para que a mensagem mais recente seja vista
// antes) uma mensagem na string ::UltMsg
METHOD SomaMsg (_sMsg) Class ClsTbUva
	local _sMsgAux := alltrim (cvaltochar (_sMsg))
	if ! alltrim (_sMsgAux) $ ::UltMsg
		::UltMsg = alltrim (_sMsgAux) + '; ' + ::UltMsg
	endif
return
