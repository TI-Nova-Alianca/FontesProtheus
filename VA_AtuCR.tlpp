// Programa:  VA_AtuCR
// Autor:     Robert Koch
// Data:      12/02/2024
// Descricao: Atualiza B1_CUSTD a partir do custo medio dos itens (GLPI 14890)

// Tags para automatizar catalogo de customizacoes:
// #TipoDePrograma    #Processamento
// #Descricao         #Atualiza B1_CUSTD a partir do custo medio dos itens
// #PalavasChave      #custo_reposicao #custo_medio #atualizacao #b1_custd #GLPI_14890
// #TabelasPrincipais #SB1 #SB9
// #Modulos           #EST

// Historico de alteracoes:
//

// --------------------------------------------------------------------------
User Function VA_AtuCR (_lAutomat)
	Local cCadastro := "Atualiza custo de reposicao (B1_CUSTD) dos produtos a partir do seu custo medio."
	Local aSays     := {}
	Local aButtons  := {}
	Local nOpca     := 0
	Local lPerg     := .F.
	local _nLock    := 0
	private _lAuto  := iif (valtype (_lAutomat) == "L", _lAutomat, .F.)

	// Verifica se o usuario tem liberacao para uso desta rotina.
	if U_ZZUVL ('069', __cUserID, .T.) //.or. U_ZZUVL ('122', __cUserID, .T.)

		// Controle de semaforo.
		_nLock := U_Semaforo (procname (), .t.)
		if _nLock != 0
			Private cPerg := "VA_ATUCR"
			_ValidPerg()
			Pergunte(cPerg,.F.)

			if _lAuto != NIL .and. _lAuto
				Processa( { |lEnd| _Gera() } )
			else
				AADD(aSays,cCadastro)
				AADD(aSays,"")
				AADD(aSays,"")
				AADD(aButtons, { 5, .T.,{|| lPerg := Pergunte(cPerg,.T. ) } } )
				AADD(aButtons, { 1, .T.,{|| nOpca := If(( lPerg .Or. Pergunte(cPerg,.T.)) .And. _TudoOk() , 1, 2 ), If( nOpca == 1, FechaBatch(), Nil ) }})
				AADD(aButtons, { 2, .T.,{|| FechaBatch() }} )
				FormBatch( cCadastro, aSays, aButtons)
				If nOpca == 1
					Processa( { |lEnd| _Gera() } )
				Endif
			endif
		endif
	endif

	// Libera semaforo
	U_Semaforo (_nLock)
return


// --------------------------------------------------------------------------
// 'Tudo OK' do FormBatch.
Static Function _TudoOk ()
	local _lRet := .T.
return _lRet


// --------------------------------------------------------------------------
// Geracao do processo
static function _Gera ()
	local _oSQL      := NIL
	local _sAliasQ   := ''
	local _nRecCount := 0
	
	_oSQL := ClsSQL():New ()
	_oSQL:_sQuery := ""
	_oSQL:_sQuery += " WITH PRODUTOS AS"
	_oSQL:_sQuery += " ("
	_oSQL:_sQuery +=    " SELECT B1_TIPO AS TIPO, B1_COD AS PRODUTO, B1_DESC AS DESCRICAO"
	_oSQL:_sQuery +=          ", B1_DATREF AS DATA_CUSTO"
	_oSQL:_sQuery +=          " , CAST (B1_CUSTD AS DECIMAL (18, " + cvaltochar (tamsx3 ("B1_CUSTD")[2]) + "))"
	_oSQL:_sQuery +=            " AS CUSTO_ATU"
	_oSQL:_sQuery +=      " FROM " + RetSQLName ("SB1") + " SB1"
	_oSQL:_sQuery +=     " WHERE SB1.D_E_L_E_T_ = ''"
	_oSQL:_sQuery +=       " AND SB1.B1_FILIAL  = '" + xfilial ("SB1") + "'"
	_oSQL:_sQuery +=       " AND SB1.B1_TIPO    = '" + mv_par02 + "'"
	_oSQL:_sQuery +=       " AND SB1.B1_COD     between '" + mv_par03 + "' AND '" + mv_par04 + "'"
	_oSQL:_sQuery += " )"
	_oSQL:_sQuery += " , ULTIMOS_SB9 AS"
	_oSQL:_sQuery += " ("
	_oSQL:_sQuery +=    " SELECT B9_COD, MAX (B9_DATA) B9_DATA"
	_oSQL:_sQuery +=      " FROM " + RetSQLName ("SB9") + " ULT"
	_oSQL:_sQuery +=     " WHERE ULT.D_E_L_E_T_ = ''"
	_oSQL:_sQuery +=       " AND ULT.B9_FILIAL  = '" + xfilial ("SB9") + "'"
	_oSQL:_sQuery +=       " AND ULT.B9_QINI    > 0"
	_oSQL:_sQuery +=       " AND ULT.B9_VINI1   > 0"
	_oSQL:_sQuery +=       " AND EXISTS (SELECT *"
	_oSQL:_sQuery +=                     " FROM PRODUTOS"
	_oSQL:_sQuery +=                    " WHERE PRODUTO = ULT.B9_COD"
	_oSQL:_sQuery +=                   ")"
	_oSQL:_sQuery +=     " GROUP BY ULT.B9_COD"
	_oSQL:_sQuery += " )"
	_oSQL:_sQuery += " , TEMP1 AS ("
	_oSQL:_sQuery += " SELECT PRODUTOS.*"
	_oSQL:_sQuery +=      " , CAST (
	_oSQL:_sQuery +=              " ISNULL ("
	_oSQL:_sQuery +=                      " (SELECT SUM (B9_VINI1) / SUM (B9_QINI) AS NOVO_CUSTO"
	_oSQL:_sQuery +=                         " FROM " + RetSQLName ("SB9") + " SB9"
	_oSQL:_sQuery +=                        " WHERE SB9.D_E_L_E_T_ = ''"
	_oSQL:_sQuery +=                          " AND SB9.B9_FILIAL  = '01'"  // Atualmente focamos na matriz por que eh onde temos o envase.
	_oSQL:_sQuery +=                          " AND SB9.B9_COD     = PRODUTOS.PRODUTO"
	_oSQL:_sQuery +=                          " AND SB9.B9_QINI    > 0"
	_oSQL:_sQuery +=                          " AND SB9.B9_VINI1   > 0"
	_oSQL:_sQuery +=                          " AND SB9.B9_DATA    = ULTIMOS_SB9.B9_DATA"
	_oSQL:_sQuery +=                       ")"
	_oSQL:_sQuery +=                       ", 0)"
	_oSQL:_sQuery +=             " AS DECIMAL (18, " + cvaltochar (tamsx3 ("B1_CUSTD")[2]) + "))"
	_oSQL:_sQuery +=        " AS NOVO_CUSTO"
	_oSQL:_sQuery +=  " FROM PRODUTOS, ULTIMOS_SB9"
	_oSQL:_sQuery += " WHERE B9_COD = PRODUTO"
	_oSQL:_sQuery += " )"
	_oSQL:_sQuery += " SELECT *"
	_oSQL:_sQuery +=   " FROM TEMP1"
	_oSQL:_sQuery +=  " WHERE CUSTO_ATU != NOVO_CUSTO"
	_oSQL:_sQuery +=  " ORDER BY PRODUTO"
	_oSQL:SetField (_sColuna = 'DATA_CUSTO', _sTipo = 'D', _nTamanho = 8, _nDecimal = 0)
	_oSQL:Log ('[' + procname () + ']')
	_sAliasQ := _oSQL:Qry2Trb (.F.)
	dbselectarea (_sAliasQ)
	count to _nRecCount
	procregua (_nRecCount)
	if mv_par01 == 1  // Simular
		(_sAliasQ) -> (dbgotop ())
		U_ShowTrb (_sAliasQ, 'Simulacao atualizacao custo reposicao', NIL)
		U_LOGTRB (_sAliasQ, .t.)
	else
		if U_MsgNoYes ("Serao atualizados " + cvaltochar (_nRecCount) + " produtos. Confirma?")
			sb1 -> (dbsetorder (1))
			(_sAliasQ) -> (dbgotop ())
			do while ! (_sAliasQ) -> (eof ())
				incproc ((_sAliasQ) -> produto)
				if ! sb1 -> (dbseek (xfilial ("SB1") + (_sAliasQ) -> produto, .F.))
					u_help ("Cadastro do produto '" + (_sAliasQ) -> produto + "' nao localizado!",, .t.)
				else
					U_Log2 ('debug', '[' + procname () + ']' + sb1 -> b1_cod)

					// Cria variaveis para uso na gravacao do evento de alteracao
					regtomemory ("SB1", .F., .F.)
					m->b1_CUSTD = (_sAliasQ) -> novo_custo
					m->b1_datref = date ()

					// Grava evento de alteracao
					_oEvento := ClsEvent():new ()
					_oEvento:AltCadast ("SB1", m->b1_cod, sb1 -> (recno ()), 'Atualizar custo repos. pelo custo medio', .F.)
					reclock ("SB1", .f.)
					sb1 -> B1_custd = m->b1_custd
					sb1 -> B1_datref = m->b1_datref
					msunlock ()
					U_AtuMerc ("SB1", sb1 -> (recno ()))
				endif

				// Cai fora no primeiro, para testes.
				// exit

				(_sAliasQ) -> (dbskip ())
			enddo
			u_help ("Processo finalizado. " + cvaltochar (_nRecCount) + " registros atualizados.")
		endif
	endif
	(_sAliasQ) -> (dbclosearea ())
	dbselectarea ("SB1")
return


// --------------------------------------------------------------------------
// Cria Perguntas no SX1
static function _ValidPerg ()
	local _aRegsPerg := {}
	local _aDefaults := {}

	//                     PERGUNT                           TIPO TAM DEC VALID F3       Opcoes                         Help
	aadd (_aRegsPerg, {01, "Simular ou executar?          ", "N",  1, 0,  "",   "    ",  {"Simular", "Executar"},       ""})
	aadd (_aRegsPerg, {02, "Tipo produto                  ", "C",  2, 0,  "",   "02  ",  {},                            ""})
	aadd (_aRegsPerg, {03, "Produto inicial               ", "C", 15, 0,  "",   "SB1 ",  {},                            ""})
	aadd (_aRegsPerg, {04, "Produto final                 ", "C", 15, 0,  "",   "SB1 ",  {},                            ""})
	U_ValPerg (cPerg, _aRegsPerg, {}, _aDefaults)
return
