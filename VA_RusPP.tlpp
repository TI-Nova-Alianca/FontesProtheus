// Programa...: VA_RusPP
// Autor......: Robert Koch
// Data.......: 13/01/2021
// Descricao..: Gera array com definicao de percentuais e datas para pagamento
//              de safra (as regras geralmente mudam de uma safra para outra).
//
// Historico de alteracoes:
// 14/01/2021 - Robert  - Criada coluna 4 com valores (a distr.por percentuais penaliza sempre a ultima parcela (frete)
// 12/02/2021 - Robert  - Novos parametros metodo ClsAssoc:FechSafra() - GLPI 9318
// 08/03/2021 - Robert  - Novos parametros metodo ClsAssoc:FechSafra (GLPI 9572)
// 29/03/2021 - Robert  - Calculava datas a partir da variavel dDataBase. Agora recebe a data de emissao por parametro (GLPI 9592).
// 07/05/2021 - Robert  - Criado tratamento para quando nao encontrar as regras para pagamento (GLPI 9891).
// 17/05/2021 - Robert  - Se o ano+mes previsto jah passou (ocorre por exemplo quando gera-se nota de complemento de preco apos a safra), nao adianta gerar com data retroativa (GLPI 9891)
// 12/02/2022 - Robert  - Ajuste no 'se ano+mes previsto jah passou' pois na vdd considerava apenas o mes! (GLPI 11619).
// 14/03/2022 - Robert  - Incluida coluna com a letra para parcela na array de retorno.
// 10/01/2023 - Robert  - Ajustes para safra 2023.
// 25/01/2023 - Robert  - Removidos alguns logs
// 03/02/2023 - Robert  - Removidos alguns logs
// 21/07/2023 - Robert  - Nova forma de parametrizacao (via atributos) do metodo ClsAssoc:FechSafra().
// 21/02/2023 - Robert  - Geravamos tradicionalmente a 1a.parcela no mes de marco, mas em mar/24
//                        ainda vai ter valores atrasados de 2023 para pagar. Entao optamos por
//                        'deslocar' todas as parcelas um mes para a frente. Com isso, a primeira
//                        parcela passa a ser no mes de abril (GLPI 14961)
// 25/02/2024 - Robert  - Estava jogando a 9a. parcela (I) para jan/24 pois voltava a janeiro sem incrementar o ano (GLPI 14961)
// 24/06/2024 - Claudia - Alterada as parcelas da safra 2024.
//
// ------------------------------------------------------------------------------------
User Function VA_RusPP (_sSafPag, _sGrpPgSaf, _nVlUva, _nVlFrete, _dEmissao)
	local _sError     := ''
	local _sWarning   := ''
	local _sXMLFech   := ''
	local _nRegraPag  := 0
	local _oAssocCP   := NIL
	local _aParcel    := {}
	local _nParcel    := 0
	local _nParcFrt   := 0
	local _nPerFrt    := 0
	local _nPerUva    := 0
	local _nSomaPer   := 0
	local _nSomaUva   := 0
	local _dVctSafra  := ctod ('')
	local _aAux       := {}
	local _sAnoVcSaf  := ''
	local _sMesVcSaf  := ''
	local _lContinua  := .T.
	private _oXMLFech := NIL  // Precisa ser do tipo PRIVATE senao a funcao XmlParser() nao funciona... vai entender.

	U_Log2 ('info', '[' + procname () + ']Calculando parcelas para safra ' + _sSafPag + ' grp: ' + _sGrpPgSaf + ' vlr.uva: ' + cvaltochar (_nVlUva) + ' vlr.frt: ' + cvaltochar (_nVlFrete) + ' dt.emissao: ' + dtoc(_dEmissao))

	// Ateh o momento, a forma de pagamento mais longa tem 11 parcelas. Acrescenta uma para o frete.
	if _lContinua
		_aParcel = {}
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'A'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'B'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'C'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'D'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'E'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'F'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'G'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'H'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'J'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'K'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'L'})
		aadd (_aParcel, {0, ctod (''), 0, 0, '', 'M'})

		// Aqui nao preciso de um associado especifico... preciso apenas ler as regras de pagamento.
		_oAssocCP = ClsAssoc():New ('003865', '01')
	//	//                                _sSafra, _lFSNFE, _lFSNFC, _lFSNFV, _lFSNFP, _lFSPrPg, _lFSRgPg, _lFSVlEf, _lFSResVGM, _lFSFrtS, _lFSLcCC, _lFSResVGC
	//	_sXmlFech = _oAssocCP:FechSafra (_sSafPag, .f.,     .f.,     .f.,     .f.,     .f.,      .t.,      .f.,      .f.,        .f.,      .f.,      .f.)
		_oAssocCP:FSSafra      = _sSafPag
		_oAssocCP:FSRegraPagto = .t.
		_sXmlFech = _oAssocCP:FechSafra ()

		U_Log2 ('debug', _sXMLFech)

		// Converte de texto para XML
		_oXMLFech := XmlParser (_sXmlFech, "_", @_sError, @_sWarning)
		if ! empty (_sError) .or. ! empty (_sWarning)
			u_help ("Erro ao decodificar retorno do XML de regras de pagamento para esta safra: " + _sError + _sWarning,, .t.)
			_lContinua = .F.
		endif
	endif

	// Verifica se tem este tipo de tag no XML
	if _lContinua
		if type ('_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem') != 'A'
			u_help ('Nao encontrei no XML as regras de pagamento para a safra ' + _sSafPag,, .T.)
			_lContinua = .F.
		else
			for _nRegraPag = 1 to len (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem)
				U_Log2 ('debug', '_nRegraPag = ' + cvaltochar (_nRegraPag))
				if _oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_grupo:TEXT == _sGrpPgSaf
					_aParcel [1, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc01:TEXT)
					_aParcel [2, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc02:TEXT)
					_aParcel [3, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc03:TEXT)
					_aParcel [4, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc04:TEXT)
					_aParcel [5, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc05:TEXT)
					_aParcel [6, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc06:TEXT)
					_aParcel [7, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc07:TEXT)
					_aParcel [8, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc08:TEXT)
					_aParcel [9, 1]  = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc09:TEXT)
					_aParcel [10, 1] = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc10:TEXT)
					_aParcel [11, 1] = val (_oXMLFech:_assocFechSafra:_regraPagamento:_regraPagamentoItem[_nRegraPag]:_perc11:TEXT)
				endif
			next
		endif
	endif
	// A parcela do frete cai sempre na proxima posicao livre
	if _lContinua
		_nParcel = 1
		do while _nParcel <= len (_aParcel) .and. _aParcel [_nParcel, 1] > 0
			_nParcel ++
		enddo
		if _nParcFrt == 1
			u_help ('Array de parcelamentos parece estar toda sem valores.',, .t.)
			_lContinua = .F.
		else
			_nParcFrt = _nParcel
			if _nVlFrete == 0
				U_Log2 ('debug', 'Não tem parcela de frete.')
			else
				U_Log2 ('debug', 'Vou jogar o frete na ' + cvaltochar (_nParcFrt) + 'a. parcela.')
			endif
		endif
	endif

	if _lContinua .and. _nVlUva == 0
		u_help ("Sem valor da uva para calcular parcelas de pagamento.",, .T.)
		_lContinua = .F.
	endif

	if _lContinua
		// Parte 1: monta coluna de percentuais de participacao de cada parcela.
		// Se a parte 2 (por valor) rodar bem, deixo de usar os percentuais.
		// Calcula quanto representa o frete sobre o total dos valores.
		// Seu percentual fica arredondado para 2 decimais e o vencimento para fevereiro do ano seguinte.
		_nPerFrt = (_nVlFrete * 100) / (_nVlUva + _nVlFrete)
		_nPerFrt = round (_nPerFrt, 2)
		_nPerFrt = round (_nPerFrt, 2)
		_aParcel [_nParcFrt, 3] = _nPerFrt
		//
		// Estando definido quanto o frete representa sobre o total da nota, preciso diminuir
		// esse percentual proporcionalmente das demais parcelas.
		_nPerUva = 100 - _nPerFrt
		_nParcel = 1
		do while _nParcel <= len (_aParcel) .and. _nParcel < _nParcFrt
			_aParcel [_nParcel, 3] = round (_nPerUva * _aParcel [_nParcel, 1] / 100, 1)
			_nParcel ++
		enddo
		//
		// Joga a diferenca de arredondamento dos percentuais na penultima parcela (a ultima tem o frete)
		_nSomaPer = 0
		for _nParcel = 1 to len (_aParcel)
			_nSomaPer += _aParcel [_nParcel, 3]
		next
		_aParcel [_nParcFrt - 1, 3] += (100 - _nSomaPer)


		// Parte 1: monta coluna de valor de cada parcela (por percentual o sistema arredonda na ultima parcela, distorcendo o frete)
		// Frete sempre valor cheio na sua parcela (mesmo que zerado).
		_aParcel [_nParcFrt, 4] = _nVlFrete
		_aParcel [_nParcFrt, 5] = 'AUX.COMB.' + _sSafPag  // NAO ALTERAR a string "AUX.COMB" por que uso-a pra identificar frete de safra no SF1100I !!!
		//
		// Distribui o valor da uva conforme percentuais definidos nas regras de pagamento.
		_nParcel = 1
		do while _nParcel <= len (_aParcel) .and. _nParcel < _nParcFrt
			_aParcel [_nParcel, 4] = round ((_nVlUva * _aParcel [_nParcel, 1] / 100), 2)
			_aParcel [_nParcel, 5] = 'SAFRA ' + _sSafPag + ' GRP.' + _sGrpPgSaf
			_nParcel ++
		enddo
		//
		// Joga a diferenca de arredondamento do valor da uva na penultima parcela (a ultima tem o frete)
		_nSomaUva = 0
		_nParcel = 1
		do while _nParcel <= len (_aParcel) .and. _nParcel < _nParcFrt
			_nSomaUva += _aParcel [_nParcel, 4]
			_nParcel ++
		enddo
		_aParcel [_nParcFrt - 1, 4] += (_nVlUva - _nSomaUva)



		// Define ano e mes para vencimento das parcelas.
		do case
		case _sSafPag == '2021' .or. _sSafPag == '2022'
			// A maioria dos vencimentos vai ser no mesmo ano da safra.
			_sAnoVcSaf = _sSafPag
			for _nParcel = 1 to len (_aParcel)
				if _aParcel [_nParcel, 3] <= 0
					loop
				endif
			//	U_Log2 ('debug', 'Definindo mes para vencimento da parcela ' + cvaltochar (_nParcel))
				if _nParcel == _nParcFrt  // Parcela do frete sempre em fevereiro do ano seguinte.
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '02'
				elseif _nParcel == 1
					// Como pagamos a primeira parcela no final do mes de marco, e a safra ainda pode estar em andamento,
					// vou usar uma data de corte antes do final do mes, para dar tempo ao financeiro de gerar faturas e
					// enviar ao banco.
					// if month (dDataBase) == 3 .and. day (dDataBase) > 20
					if month (_dEmissao) == 3 .and. day (_dEmissao) > 20
						U_Log2 ('AVISO', 'Fora da data de corte. Movendo 1a.parcela para o mes de abril.')
						_sMesVcSaf = '04'
					else
						_sMesVcSaf = '03'
					endif
				elseif _nParcel == 2
					_sMesVcSaf = '04'
				elseif _nParcel == 3
					_sMesVcSaf = '05'
				elseif _nParcel == 4
					_sMesVcSaf = '06'
				elseif _nParcel == 5
					_sMesVcSaf = '07'
				elseif _nParcel == 6
					_sMesVcSaf = '08'
				elseif _nParcel == 7
					_sMesVcSaf = '09'
				elseif _nParcel == 8
					_sMesVcSaf = '10'
				elseif _nParcel == 9
					_sMesVcSaf = '11'
				elseif _nParcel == 10
					_sMesVcSaf = '12'
				elseif _nParcel == 11
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '01'
				else
					u_help ("Sem tratamento para parcela " + cvaltochar (_nParcel) + " no ajuste de datas de pagamento de safra.",, .T.)
					_dVctSafra = _dEmissao
					_lContinua = .F.
				endif

				// Se o ano+mes previsto jah passou (ocorre por exemplo quando gera-se nota de complemento de preco apos a safra), nao adianta gerar com data retroativa.
				if _sAnoVcSaf + _sMesVcSaf < left (dtos (dDataBase), 6)
					U_Log2 ('aviso', 'Vencimento desta parcela seria inicialmente calculado para o ano/mes ' + _sAnoVcSaf + _sMesVcSaf + ' (retroativo). Vou atualizar para o ano/mes da dDataBase')
					_sAnoVcSaf = left (dtos (dDataBase), 4)
					_sMesVcSaf = substring (dtos (dDataBase), 5, 2)
				endif

			//	U_Log2 ('debug', 'Ano/mes para vcto desta parcela ficou definido como ' + _sAnoVcSaf + _sMesVcSaf)

				_aParcel [_nParcel, 2] = lastday (stod (_sAnoVcSaf + _sMesVcSaf + '01'))
			next

	// ateh o dia 21/02/2024 estavamos iniciando a 1a.parcela no mes de marco. Agora iniciaremos em abril para nao misturar com resto da safra anterior. --->	case _sSafPag $ '2023/2024'
		case _sSafPag $ '2023'

			// A maioria dos vencimentos vai ser no mesmo ano da safra.
			_sAnoVcSaf = _sSafPag
			for _nParcel = 1 to len (_aParcel)
				if _aParcel [_nParcel, 3] <= 0
					loop
				endif
			//	U_Log2 ('debug', 'Definindo mes para vencimento da parcela ' + cvaltochar (_nParcel))
				// Parcela do frete sempre eh a ultima (jah descobri
				// anteriormente qual das parcelas vai ter o frete.
				if _nParcel == _nParcFrt
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '03'
				elseif _nParcel == 1
					_sMesVcSaf = '04'
				elseif _nParcel == 2
					_sMesVcSaf = '05'
				elseif _nParcel == 3
					_sMesVcSaf = '06'
				elseif _nParcel == 4
					_sMesVcSaf = '07'
				elseif _nParcel == 5
					_sMesVcSaf = '08'
				elseif _nParcel == 6
					_sMesVcSaf = '09'
				elseif _nParcel == 7
					_sMesVcSaf = '10'
				elseif _nParcel == 8
					_sMesVcSaf = '11'
				elseif _nParcel == 9
					_sMesVcSaf = '12'
				elseif _nParcel == 10
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '01'
				elseif _nParcel == 11
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '02'
				else
					u_help ("Sem tratamento para parcela " + cvaltochar (_nParcel) + " no ajuste de datas de pagamento de safra.",, .T.)
					_dVctSafra = _dEmissao
					_lContinua = .F.
				endif

				// Se o ano+mes previsto jah passou (ocorre por exemplo quando gera-se nota de complemento de preco apos a safra), nao adianta gerar com data retroativa.
				if _sAnoVcSaf + _sMesVcSaf < left (dtos (dDataBase), 6)
					U_Log2 ('aviso', 'Vencimento desta parcela seria inicialmente calculado para o ano/mes ' + _sAnoVcSaf + _sMesVcSaf + ' (retroativo). Vou atualizar para o ano/mes da dDataBase')
					_sAnoVcSaf = left (dtos (dDataBase), 4)
					_sMesVcSaf = substring (dtos (dDataBase), 5, 2)
				endif

			//	U_Log2 ('debug', 'Ano/mes para vcto desta parcela ficou definido como ' + _sAnoVcSaf + _sMesVcSaf)

				_aParcel [_nParcel, 2] = lastday (stod (_sAnoVcSaf + _sMesVcSaf + '01'))
			next

		case _sSafPag $ '2024'

			// A maioria dos vencimentos vai ser no mesmo ano da safra.
			_sAnoVcSaf = _sSafPag
			for _nParcel = 1 to len (_aParcel)
				if _aParcel [_nParcel, 3] <= 0
					loop
				endif
			    //	U_Log2 ('debug', 'Definindo mes para vencimento da parcela ' + cvaltochar (_nParcel))
				// Parcela do frete sempre eh a ultima (jah descobri
				// anteriormente qual das parcelas vai ter o frete.
				if _nParcel == _nParcFrt
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '05'
				elseif _nParcel == 1
					_sMesVcSaf = '06'
				elseif _nParcel == 2
					_sMesVcSaf = '07'
				elseif _nParcel == 3
					_sMesVcSaf = '08'
				elseif _nParcel == 4
					_sMesVcSaf = '09'
				elseif _nParcel == 5
					_sMesVcSaf = '10'
				elseif _nParcel == 6
					_sMesVcSaf = '11'
				elseif _nParcel == 7
					_sMesVcSaf = '12'
				elseif _nParcel == 8
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '01'
				elseif _nParcel == 9
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '02'
				elseif _nParcel == 10
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '03'
				elseif _nParcel == 11
					_sAnoVcSaf = strzero (val (_sSafPag) + 1, 4)
					_sMesVcSaf = '04'
				else
					u_help ("Sem tratamento para parcela " + cvaltochar (_nParcel) + " no ajuste de datas de pagamento de safra.",, .T.)
					_dVctSafra = _dEmissao
					_lContinua = .F.
				endif

				// Se o ano+mes previsto jah passou (ocorre por exemplo quando gera-se nota de complemento de preco apos a safra), nao adianta gerar com data retroativa.
				if _sAnoVcSaf + _sMesVcSaf < left (dtos (dDataBase), 6)
					U_Log2 ('aviso', 'Vencimento desta parcela seria inicialmente calculado para o ano/mes ' + _sAnoVcSaf + _sMesVcSaf + ' (retroativo). Vou atualizar para o ano/mes da dDataBase')
					_sAnoVcSaf = left (dtos (dDataBase), 4)
					_sMesVcSaf = substring (dtos (dDataBase), 5, 2)
				endif

			//	U_Log2 ('debug', 'Ano/mes para vcto desta parcela ficou definido como ' + _sAnoVcSaf + _sMesVcSaf)

				_aParcel [_nParcel, 2] = lastday (stod (_sAnoVcSaf + _sMesVcSaf + '01'))
			next

		otherwise
			u_help ("Sem definicao de parcelamento de pagamento de safra para o ano " + _sSafPag + " no programa " + procname (),, .t.)
			_lContinua = .F.
		endcase
	endif

	// Retroage datas dos vencimentos ateh que sejam datas validas, pois podem
	// ter caido em domingos ou feriados.
	if _lContinua
		for _nParcel = 1 to len (_aParcel)
			if ! empty (_aParcel [_nParcel, 2])
				// do while _aParcel [_nParcel, 2] >= dDataBase .and. datavalida (_aParcel [_nParcel, 2]) > _aParcel [_nParcel, 2]
				do while _aParcel [_nParcel, 2] >= _dEmissao .and. datavalida (_aParcel [_nParcel, 2]) > _aParcel [_nParcel, 2]
					_aParcel [_nParcel, 2] -= 1
				enddo
			endif
		next
		//U_Log2 ('info', 'Parcelamento previsto:')
		//u_log2 ('info', _aParcel)
	endif

	// Retorna somente as linhas com dados definidos
	_aAux = {}
	if _lContinua
		for _nParcel = 1 to len (_aParcel)
			if ! empty (_aParcel [_nParcel, 2]) .and. (_aParcel [_nParcel, 3] > 0 .or. _aParcel [_nParcel, 4] > 0)
				aadd (_aAux, aclone (_aParcel [_nParcel])) 
			endif
		next
	endif
	U_Log2 ('info', '[' + procname () + ']Parcelas previstas:')
	U_Log2 ('info', _aAux)
return _aAux
