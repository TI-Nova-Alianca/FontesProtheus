// Programa:  vtEtqAp
// Autor:     Robert Koch
// Data:      26/08/2022
// Descricao: Apontamento de etiquetas de producao via telnet (GLPI 11994)

// Tags para automatizar catalogo de customizacoes:
// #TipoDePrograma    #Processamento
// #Descricao         #Apontamento de etiquetas de producao via telnet
// #PalavasChave      #telnet #terminal #coletor #apontamento_producao #apontamento_etiqueta
// #TabelasPrincipais #ZA1 #SD3 #SC2
// #Modulos           #PCP #EST

// Historico de alteracoes:
// 02/09/2022 - Robert - Chamadas de vtAlert() substituidas por u_help().
// 22/09/2022 - Robert - Validacao das barras do produto paas a ser pelo atributo _oEtiq:CodBarCx (GLPI 11994)
//

#include "protheus.ch"

// --------------------------------------------------------------------------
user function vtEtqAp ()
	local _lContinua   := .T.
	local _nTamCBEmb   := TamSX3 ("C2_VABARCX")[1]
	private _sBarEtiq  := ''
	private _sCBEmbCol := ''
	private _sProdEtq  := ''
	private _dDatProd  := ctod ('')
	private _oEtiq     := NIL
	private _sTnoProd  := ' '
	private _nAltTela  := 10
	private _nLargTela := 39
	private _sArqLog := 'VtEtqAp.log'  // Quero usar o mesmo arquivo de log para todos os usuarios.

	U_Log2 ('debug', '[' + procname () + ']Entrou no programa.')

	do while _lContinua
		
		// Limpa variaveis para ler nova etiqueta.
		_sBarEtiq = space (10)
		_sCBEmbCol = space (_nTamCBEmb)  // Maior que o necessario por que tem casos de licitacoes de SP que exigem uns caracteres de controle no inicio das barras.
		_sProdEtq = space (15)
		// Nao limpar entre as etiquetas --> _dDatProd = ctod ('')
		_oEtiq    = NIL
		// Nao limpar entre as etiquetas --> _sTnoProd   = space (1)

		vtSetSize (_nAltTela, _nLargTela)
		terCls()

		if _lContinua
			terSay(0, 0, "Apontar etiqueta:")
//			U_Log2 ('debug', '[' + procname () + ']Antes de ler etiq')
			VTSetGet (@_sBarEtiq, "_sBarEtiq", 0, 19, {||_ValEtiq ()})
			vtRead ()
			_lContinua = (vtLastkey() != 27)
			terCBuffer ()
		endif
		if _lContinua
//			U_Log2 ('debug', '[' + procname () + ']Antes de ler barras produto')
			terSay (1, 0, "Cod.barras produto:")
			VTSetGet (@_sCBEmbCol, "_sCBEmbCol", 1, 19, {||_ValCBProd ()})
			vtRead ()
			_lContinua = (vtLastkey() != 27)
			terCBuffer ()
		endif
		if _lContinua
			terSay (4, 0, "Dt.producao:")
			VTSetGet (@_dDatProd, "_dDatProd", 4, 13, {||_ValDtProd ()})
			vtRead ()
			_lContinua = (vtLastkey() != 27)
			terCBuffer ()
		endif
		if _lContinua
			terSay (4, 25, "Turno:")
			VTSetGet (@_sTnoProd, "_sTnoProd", 4, 31, {||_ValTurno ()})
			vtRead ()
			_lContinua = (vtLastkey() != 27)
			terCBuffer ()
		endif
		if _lContinua
			U_Log2 ('info', '[' + procname () + ']Campos lidos. Vou gerar apontamento')
			terSay (6, 0, "Aguarde... gerando apontamento")
			if _oEtiq:ApontaOP (_dDatProd, _sTnoProd)
				u_help ("Etiq." + _oEtiq:Codigo + " apontada com sucesso!")
			else
				u_help ("ERRO no apontamento.",, .t.)
			endif
		endif
	enddo
return

// --------------------------------------------------------------------------
static function _ValEtiq ()
	local _lRet := .T.
	U_Log2 ('debug', '[' + procname () + ']etiqueta lida: >>' + _sBarEtiq + '<<')
	
	if _lRet .and. empty (_sBarEtiq)
		vtBeep (2)
		u_help ("Etiqueta nao cadastrada.",, .t.)
		_sProdEtq = ''
		_lRet = .F.
	endif

	// Farei algumas validacoes rapidinhas direto pelo ZA1 antes de instanciar uma etiqueta, para melhoria de performance.
	if _lRet
		za1 -> (dbsetorder (1))  // ZA1_FILIAL+ZA1_CODIGO+ZA1_DATA+ZA1_OP
		if ! za1 -> (dbseek (xfilial ("ZA1") + _sBarEtiq, .F.))
			vtBeep (2)
			u_help ("Etiqueta nao cadastrada.",, .t.)
			_sProdEtq = ''
			_lRet = .F.
		else
			_sProdEtq = za1 -> za1_prod
		endif
	endif
	if _lRet
		_oEtiq := ClsEtiq ():New (_sBarEtiq)
		_lRet = _oEtiq:PodeApont(_oEtiq:Quantidade, 0)  // Sempre seria um apontamento 
	endif
return _lRet

// --------------------------------------------------------------------------
static function _ValCBProd ()
	local _lRet      := .T.
	local _sDescProd := ''

	U_Log2 ('debug', '[' + procname () + ']cod.barras (do produto) lido: >>' + _sCBEmbCol + '<<')
	if ! _oEtiq:ValCbEmb (_sCBEmbCol)
		u_help (_oEtiq:UltMsg,, .t.)
		_lRet = .F.
	else
		sb1 -> (dbsetorder (1))
		if ! sb1 -> (dbseek (xfilial ("SB1") + _oEtiq:Produto, .F.))
			u_help ("Produto " + _oEtiq:Produto + " nao cadastrado!",, .t.)
			_lRetVCBE = .F.
		else
			_sDescProd = alltrim (sb1 -> b1_cod) + ' - ' + alltrim (sb1 -> b1_desc)
			terSay (2, 0, substr (_sDescProd, 1, _nLargTela))
			terSay (3, 0, substr (_sDescProd, _nLargTela + 1, _nLargTela))
		endif
	endif
//	U_Log2 ('info', 'Finalizando ' + procname ())
return _lRet

// --------------------------------------------------------------------------
static function _ValDtProd ()
	local _lRet := .T.
//	U_Log2 ('debug', '[' + procname () + ']' + dtoc (_dDatProd))
	if _lRet .and. _dDatProd > date ()
		u_help ("Nao pode ser informada data futura",, .t.)
		_lRet = .F.
	endif
	if _lRet .and. _dDatProd < date () - 5  // Aqui pode ter ajustes...
		u_help ("Nao pode ser informada data muito antiga",, .t.)
		_lRet = .F.
	endif
return _lRet

// --------------------------------------------------------------------------
static function _ValTurno ()
	local _lRet := .T.
//	U_Log2 ('debug', '[' + procname () + ']' + _sTnoProd)
	if _lRet .and. ! _sTnoProd $ '12'
		u_help ("Turno deve ser 1 ou 2",, .t.)
		_lRet = .F.
	endif
return _lRet
